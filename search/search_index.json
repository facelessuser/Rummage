{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rummage Overview Rummage is a cross platform search and replace tool. Rummage crawls directories and searches for specified patterns (either regular expression or literal) and can optionally replace those targets with desired text. Rummage is written in Python and is currently available on Python 3. Rummage by default uses Python's Re regular expression engine, but you can also use the fantastic, feature rich Regex search engine and do interesting things like fuzzy searching and more. h1 {text-align: center;} .svg-logo {display: inline; padding: 0; margin: 0; height: 48px; width: 48px; vertical-align: bottom;}","title":"Rummage"},{"location":"#rummage","text":"","title":"Rummage"},{"location":"#overview","text":"Rummage is a cross platform search and replace tool. Rummage crawls directories and searches for specified patterns (either regular expression or literal) and can optionally replace those targets with desired text. Rummage is written in Python and is currently available on Python 3. Rummage by default uses Python's Re regular expression engine, but you can also use the fantastic, feature rich Regex search engine and do interesting things like fuzzy searching and more. h1 {text-align: center;} .svg-logo {display: inline; padding: 0; margin: 0; height: 48px; width: 48px; vertical-align: bottom;}","title":"Overview"},{"location":"extras/","text":"Extras File Manager Context Menu macOS Open Automator. Create new Service. Set the following: Service receives selected files or folders in any Application . Shell: /bin/sh . Pass input: as arguments . Content of script: ( /Library/Frameworks/Python.framework/Versions/3.6/bin/rummage --path \" $1 \" ) >/dev/null 2 > & 1 & This is just an example. You will need to determine the location of your Python install. Save to /Users/<username>/Library/Services/Rummage Here... . Windows Create a file rummage.reg with the content from one of the entries below. Replace <python_install_path> with the actual path to your Python directory (usually something like: c:\\Python35 ). Remember to escape backslashes appropriately. Also note that we quote %1 to allow spaces in the command line argument. Paths may vary, and it is left up to the user to discover where their Python install directory is. Warning This isn't a guide in how to do registry editing proper, so only edit the registry if you are certain of what you are doing. Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Optionally, you can also include the Rummage icon beside your context menu entry by adding a few additional lines: Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Save file. Double click the registry file to add the context menu into Windows Explorer. Linux There are many different flavors of Linux using different file managers. This makes it difficult to give a guide to cover all cases. Please research about your specific distro's file manager and how to add context menus. If you would like to include the info here, please issue a pull request to update the documentation. Ubuntu Nautilus (Gnome) Paths might vary depending on Ubuntu version etc. Create an executable file called Rummage Here... in ~/.local/share/nautilus/scripts/ with the following content (RUMMAGE_PATH should be the binary created when installing rummage in Python which is usually /usr/local/bin/rummage ). #!/usr/bin/python import os import subprocess RUMMAGE_PATH = \"/usr/local/bin/rummage\" selected_paths = os . environ . get ( \"NAUTILUS_SCRIPT_SELECTED_FILE_PATHS\" , None ) if selected_paths is not None : paths = selected_paths . split ( \" \\n \" ) if len ( paths ): subprocess . Popen ([ RUMMAGE_PATH , \"--path\" , paths [ 0 ]]) Restart of Nautilus may or may not be needed, but context menu item should appear under Scripts and should work on files and folders. Ubuntu Dolphin (KDE) At the time of writing, this was tested on KDE 5, so most of the commands are appended with '5'. To discover where you can store your context menu entries, run the following command: facelessuser@facelessuser:~$ kf5-config --path services /home/facelessuser/.local/share/kservices5/:/usr/share/kservices5/ Next create your .desktop file in one of these locations creating the necessary folder(s) if needed. In this example, the file will be created at ~/.local/share/kservices5/ServiceMenus/rummage.desktoop . Provide the necessary configuration to specify the entry type, file targets, command to execute, icon, etc. In our case, we specify all/all to target both files and folders. We also point to one of the PNG files that ship in the package for the icon. [Desktop Entry] Type = Service X-KDE-ServiceTypes = KonqPopupMenu/Plugin MimeType = all/all; Actions = rummage [Desktop Action rummage] Name = Rummage Here... Icon = /usr/local/lib/python3.5/dist-packages/rummage/lib/gui/data/rummage_1024.png Exec = rummage --path \"%f\" Lastly we rebuild and refresh the desktop entries: facelessuser@facelessuser:~$ kbuildsycoca5 Close all Dolphin windows and reopen to see your context menu item. It should be found under Actions . Ubuntu Thunar (XFCE4) In Ubuntu 18.04, XFCE4 uses Thunar. Thunar has a built in way of setting custom context menu items. This may or may not apply to other distros. In Thunar, select Edit > Configure Custom Actions... . You will be presented with the custom actions dialog. Simply press the button with the + to create a new entry. Fill in the inputs as shown below (or modify to your preference): Then select the Appearance Conditions tab and fill in the fields as shown below (or modify to your preference): Afterwards, you should have a Rummage context menu on both files and directories in Thunar. Localization Rummage provides an i18n localization framework to allow support for displaying the UI in other locales. Currently the project only has an incomplete Russian translation (I don't speak Russian, so I can't complete it). Translations should be compiled and included by default requiring no additional steps starting in version 3.6.0. I only speak English, so I do not maintain the translations. If the UI changes, someone from the community will need to update them appropriately via pull requests or they will remain out of date. Editing Existing Translations Translations are stored at rummage/lib/gui/localization/locale/<LOCALE>/LC_MESSAGES/rummage.po . Just edit the rummage.po for the appropriate <LOCALE> . Inside each .po file there will be a msgid for each unique translatable string. Each msgid represents the actual US English text that is shown in Rummage. Underneath each msgid , you'll also find a msgstr which represents the translation for the msgid . Just edit the corresponding msgstr for each msgid in the existing rummage.po file. msgid \"About\" msgstr \"<my_translation>\" Generate New Template from Source In the Python source, you'll notice that translatable strings are represented as _(\"some text\") . _ is the function that retrieves the proper translations. In order to provide translations, we have to build up a template of all of these strings in a .pot file. This is done by running: python setup.py extract_messages This will scan the Python source and generate a template at rummage/lib/gui/localization/locale/rummage.pot . If you update the source in a way that requires generating a new .pot file, then you will most likely need to update existing .po files as well. See Update Translation Files to see how. See Babel's documentation on extract_messages for more info. Update Translation Files When new strings are added in the source, or strings are changed, you will need to re-generate the .pot file and then update the .po files. This should update all .po files. python setup.py update_catalog If you need to only update a specific .po file: python setup.py update_catalog -l en_US See Babel's documentation on update_catalog for more info. Create New Translations To create a translation .po file to edit, all you need to do is run the command below specifying your locale. The command should create a .po file to edit and the associated directory structure. python setup.py init_catalog -l en_US See Babel's documentation on init_catalog for more info. Build Translations Building translations is also pretty easy: python setup.py compile_catalog This should build .mo files for all languages. See Babel's documentation on compile_catalog for more info.","title":"Extras"},{"location":"extras/#extras","text":"","title":"Extras"},{"location":"extras/#file-manager-context-menu","text":"","title":"File Manager Context Menu"},{"location":"extras/#macos","text":"Open Automator. Create new Service. Set the following: Service receives selected files or folders in any Application . Shell: /bin/sh . Pass input: as arguments . Content of script: ( /Library/Frameworks/Python.framework/Versions/3.6/bin/rummage --path \" $1 \" ) >/dev/null 2 > & 1 & This is just an example. You will need to determine the location of your Python install. Save to /Users/<username>/Library/Services/Rummage Here... .","title":"macOS"},{"location":"extras/#windows","text":"Create a file rummage.reg with the content from one of the entries below. Replace <python_install_path> with the actual path to your Python directory (usually something like: c:\\Python35 ). Remember to escape backslashes appropriately. Also note that we quote %1 to allow spaces in the command line argument. Paths may vary, and it is left up to the user to discover where their Python install directory is. Warning This isn't a guide in how to do registry editing proper, so only edit the registry if you are certain of what you are doing. Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Optionally, you can also include the Rummage icon beside your context menu entry by adding a few additional lines: Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Save file. Double click the registry file to add the context menu into Windows Explorer.","title":"Windows"},{"location":"extras/#linux","text":"There are many different flavors of Linux using different file managers. This makes it difficult to give a guide to cover all cases. Please research about your specific distro's file manager and how to add context menus. If you would like to include the info here, please issue a pull request to update the documentation.","title":"Linux"},{"location":"extras/#ubuntu-nautilus-gnome","text":"Paths might vary depending on Ubuntu version etc. Create an executable file called Rummage Here... in ~/.local/share/nautilus/scripts/ with the following content (RUMMAGE_PATH should be the binary created when installing rummage in Python which is usually /usr/local/bin/rummage ). #!/usr/bin/python import os import subprocess RUMMAGE_PATH = \"/usr/local/bin/rummage\" selected_paths = os . environ . get ( \"NAUTILUS_SCRIPT_SELECTED_FILE_PATHS\" , None ) if selected_paths is not None : paths = selected_paths . split ( \" \\n \" ) if len ( paths ): subprocess . Popen ([ RUMMAGE_PATH , \"--path\" , paths [ 0 ]]) Restart of Nautilus may or may not be needed, but context menu item should appear under Scripts and should work on files and folders.","title":"Ubuntu Nautilus (Gnome)"},{"location":"extras/#ubuntu-dolphin-kde","text":"At the time of writing, this was tested on KDE 5, so most of the commands are appended with '5'. To discover where you can store your context menu entries, run the following command: facelessuser@facelessuser:~$ kf5-config --path services /home/facelessuser/.local/share/kservices5/:/usr/share/kservices5/ Next create your .desktop file in one of these locations creating the necessary folder(s) if needed. In this example, the file will be created at ~/.local/share/kservices5/ServiceMenus/rummage.desktoop . Provide the necessary configuration to specify the entry type, file targets, command to execute, icon, etc. In our case, we specify all/all to target both files and folders. We also point to one of the PNG files that ship in the package for the icon. [Desktop Entry] Type = Service X-KDE-ServiceTypes = KonqPopupMenu/Plugin MimeType = all/all; Actions = rummage [Desktop Action rummage] Name = Rummage Here... Icon = /usr/local/lib/python3.5/dist-packages/rummage/lib/gui/data/rummage_1024.png Exec = rummage --path \"%f\" Lastly we rebuild and refresh the desktop entries: facelessuser@facelessuser:~$ kbuildsycoca5 Close all Dolphin windows and reopen to see your context menu item. It should be found under Actions .","title":"Ubuntu Dolphin (KDE)"},{"location":"extras/#ubuntu-thunar-xfce4","text":"In Ubuntu 18.04, XFCE4 uses Thunar. Thunar has a built in way of setting custom context menu items. This may or may not apply to other distros. In Thunar, select Edit > Configure Custom Actions... . You will be presented with the custom actions dialog. Simply press the button with the + to create a new entry. Fill in the inputs as shown below (or modify to your preference): Then select the Appearance Conditions tab and fill in the fields as shown below (or modify to your preference): Afterwards, you should have a Rummage context menu on both files and directories in Thunar.","title":"Ubuntu Thunar (XFCE4)"},{"location":"extras/#localization","text":"Rummage provides an i18n localization framework to allow support for displaying the UI in other locales. Currently the project only has an incomplete Russian translation (I don't speak Russian, so I can't complete it). Translations should be compiled and included by default requiring no additional steps starting in version 3.6.0. I only speak English, so I do not maintain the translations. If the UI changes, someone from the community will need to update them appropriately via pull requests or they will remain out of date.","title":"Localization"},{"location":"extras/#editing-existing-translations","text":"Translations are stored at rummage/lib/gui/localization/locale/<LOCALE>/LC_MESSAGES/rummage.po . Just edit the rummage.po for the appropriate <LOCALE> . Inside each .po file there will be a msgid for each unique translatable string. Each msgid represents the actual US English text that is shown in Rummage. Underneath each msgid , you'll also find a msgstr which represents the translation for the msgid . Just edit the corresponding msgstr for each msgid in the existing rummage.po file. msgid \"About\" msgstr \"<my_translation>\"","title":"Editing Existing Translations"},{"location":"extras/#generate-new-template-from-source","text":"In the Python source, you'll notice that translatable strings are represented as _(\"some text\") . _ is the function that retrieves the proper translations. In order to provide translations, we have to build up a template of all of these strings in a .pot file. This is done by running: python setup.py extract_messages This will scan the Python source and generate a template at rummage/lib/gui/localization/locale/rummage.pot . If you update the source in a way that requires generating a new .pot file, then you will most likely need to update existing .po files as well. See Update Translation Files to see how. See Babel's documentation on extract_messages for more info.","title":"Generate New Template from Source"},{"location":"extras/#update-translation-files","text":"When new strings are added in the source, or strings are changed, you will need to re-generate the .pot file and then update the .po files. This should update all .po files. python setup.py update_catalog If you need to only update a specific .po file: python setup.py update_catalog -l en_US See Babel's documentation on update_catalog for more info.","title":"Update Translation Files"},{"location":"extras/#create-new-translations","text":"To create a translation .po file to edit, all you need to do is run the command below specifying your locale. The command should create a .po file to edit and the associated directory structure. python setup.py init_catalog -l en_US See Babel's documentation on init_catalog for more info.","title":"Create New Translations"},{"location":"extras/#build-translations","text":"Building translations is also pretty easy: python setup.py compile_catalog This should build .mo files for all languages. See Babel's documentation on compile_catalog for more info.","title":"Build Translations"},{"location":"installation/","text":"Installation Requirements Rummage, when installed via pip , will install all of your required dependencies, but there are a few optional dependencies. If desired, you can install these dependencies manually, or install them automatically with pip . Name Details regex Regex is a great regular expression engine that adds some nice features such as fuzzy searching, nested char sets, better Unicode support, and more. cchardet cchardet is high speed universal character encoding detector. Much faster than the default chardet . Installation On systems like Windows, installation is pretty straight forward as wheels are provided for all packages in pip . On other systems, there may be some prerequisites. If on Linux, it is recommended to make sure you can install wxpython first. This is due to the fact that installation of that library may require special instructions and will cause the installation of Rummage to fail if wxpython fails due to not having the necessary prerequisites. Prerequisites Linux macOS Assuming prerequisites are satisfied, installing Rummage is easy. Install: $ pip install rummage Install with optional modules. $ pip install rummage [ extras ] Upgrade: $ pip install --upgrade rummage Linux Prerequisites Linux is by far the more involved system to install wxPython on, but it is getting easier. Recommended Pre-built Wheels The wxPython project has started providing wheels for certain distros. While not all distros have wheels, this may be an attractive solution if you run one of the distros that do have pre-built wheels. The one downside is that the wheels are not available through on PyPI. More information on why and details on installation can be found here: https://www.wxpython.org/pages/downloads/ . Simplified instructions: Find the folder for your distro over at https://extras.wxpython.org/wxPython4/extras/linux/ . Use pip and the server's location like so. $ pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython While the wheel should install fine, when you actually run Rummage, you may see some libraries missing. A common one on Ubuntu is libSDL libraries. If you see a complaint about a library not being found or loaded, and you are on Ubuntu, you can install apt-find and search for the package containing the file, then you can install it. $ sudo apt install apt-file $ sudo apt-file update $ apt-file search libSDL2-2.0.so.0 libsdl2-2.0-0: /usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0 libsdl2-2.0-0: /usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0.10.0 $ sudo apt install libsdl2-2.0-0 Pre-build Packages If you have a recent Linux distro that has a pre-built, installable wxPython package for your version of Python, then it may make sense to just install the pre-built package via your Linux package manager. The version must meet the version requirements of the Rummage package you are installing. Manual If you have installed a version of Python on your machine that does not have a pre-built wxPython package, or are using a distro that does not have a pre-built wheel, you may have to build it. You can build the package by installing with pip , but you may find that it won't build until you get all the dependencies installed. Once the dependencies for building are in place, you can run pip to install the package. We do not have updated lists of prerequisites for distros. The last updated list was from Ubuntu 18.04 and Fedora 26. What you must install may vary depend on what is already installed on your distro out of the box. Also, the version of each prerequisites may vary from distro to distro or from distro release to distro release. Usually the requirements deal with gstreamer , gtk , libsdl , etc. Below are some examples, but are most likely out of date: Ubuntu 18.04 $ sudo apt-get install python3.6-dev dpkg-dev build-essential libwebkitgtk-dev libjpeg-dev libtiff-dev libsdl1.2-dev libgstreamer-plugins-base1.0-dev libnotify-dev freeglut3 freeglut3-dev libgtk-3-dev libwebkitgtk-3.0-dev Fedora 26 $ sudo dnf install gcc-c++ wxGTK-devel gstreamer-devel webkitgtk-devel GConf2-devel gstreamer-plugins-base-devel Once dependencies are in place, you can finally install wxPython with pip ( pip install wxpython ). Be patient when installing wxPython manually as Linux must build the package, and it won't give much in the way of status while it builds. If it fails and complains about a missing library, you may have to install more dependencies. For a complete list of dependencies please check wxPython's official documentation on dependencies before installing. Particularly under this section . If they are out of date, please contact the wxPython team for better instructions. macOS Prerequisites On macOS, Rummage uses either pure Python modules, or modules that provide wheels. What this means is that no C code compilation is required to install Rummage; therefore, no prior steps are needed. But if you want to install regex , there will be some C code compilation performed by pip which will require Xcode to be installed. Download Xcode from the Mac App Store. Navigate to Xcode > Preferences > Downloads tab. Click the button to install the Command Line Tools. Open Terminal (Applications/Terminal) and run xcode-select --install . You will be prompted to install the Xcode Command Line Tools.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Rummage, when installed via pip , will install all of your required dependencies, but there are a few optional dependencies. If desired, you can install these dependencies manually, or install them automatically with pip . Name Details regex Regex is a great regular expression engine that adds some nice features such as fuzzy searching, nested char sets, better Unicode support, and more. cchardet cchardet is high speed universal character encoding detector. Much faster than the default chardet .","title":"Requirements"},{"location":"installation/#installation_1","text":"On systems like Windows, installation is pretty straight forward as wheels are provided for all packages in pip . On other systems, there may be some prerequisites. If on Linux, it is recommended to make sure you can install wxpython first. This is due to the fact that installation of that library may require special instructions and will cause the installation of Rummage to fail if wxpython fails due to not having the necessary prerequisites. Prerequisites Linux macOS Assuming prerequisites are satisfied, installing Rummage is easy. Install: $ pip install rummage Install with optional modules. $ pip install rummage [ extras ] Upgrade: $ pip install --upgrade rummage","title":"Installation"},{"location":"installation/#linux-prerequisites","text":"Linux is by far the more involved system to install wxPython on, but it is getting easier.","title":"Linux Prerequisites"},{"location":"installation/#recommended","text":"","title":"Recommended"},{"location":"installation/#pre-built-wheels","text":"The wxPython project has started providing wheels for certain distros. While not all distros have wheels, this may be an attractive solution if you run one of the distros that do have pre-built wheels. The one downside is that the wheels are not available through on PyPI. More information on why and details on installation can be found here: https://www.wxpython.org/pages/downloads/ . Simplified instructions: Find the folder for your distro over at https://extras.wxpython.org/wxPython4/extras/linux/ . Use pip and the server's location like so. $ pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython While the wheel should install fine, when you actually run Rummage, you may see some libraries missing. A common one on Ubuntu is libSDL libraries. If you see a complaint about a library not being found or loaded, and you are on Ubuntu, you can install apt-find and search for the package containing the file, then you can install it. $ sudo apt install apt-file $ sudo apt-file update $ apt-file search libSDL2-2.0.so.0 libsdl2-2.0-0: /usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0 libsdl2-2.0-0: /usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0.10.0 $ sudo apt install libsdl2-2.0-0","title":"Pre-built Wheels"},{"location":"installation/#pre-build-packages","text":"If you have a recent Linux distro that has a pre-built, installable wxPython package for your version of Python, then it may make sense to just install the pre-built package via your Linux package manager. The version must meet the version requirements of the Rummage package you are installing.","title":"Pre-build Packages"},{"location":"installation/#manual","text":"If you have installed a version of Python on your machine that does not have a pre-built wxPython package, or are using a distro that does not have a pre-built wheel, you may have to build it. You can build the package by installing with pip , but you may find that it won't build until you get all the dependencies installed. Once the dependencies for building are in place, you can run pip to install the package. We do not have updated lists of prerequisites for distros. The last updated list was from Ubuntu 18.04 and Fedora 26. What you must install may vary depend on what is already installed on your distro out of the box. Also, the version of each prerequisites may vary from distro to distro or from distro release to distro release. Usually the requirements deal with gstreamer , gtk , libsdl , etc. Below are some examples, but are most likely out of date: Ubuntu 18.04 $ sudo apt-get install python3.6-dev dpkg-dev build-essential libwebkitgtk-dev libjpeg-dev libtiff-dev libsdl1.2-dev libgstreamer-plugins-base1.0-dev libnotify-dev freeglut3 freeglut3-dev libgtk-3-dev libwebkitgtk-3.0-dev Fedora 26 $ sudo dnf install gcc-c++ wxGTK-devel gstreamer-devel webkitgtk-devel GConf2-devel gstreamer-plugins-base-devel Once dependencies are in place, you can finally install wxPython with pip ( pip install wxpython ). Be patient when installing wxPython manually as Linux must build the package, and it won't give much in the way of status while it builds. If it fails and complains about a missing library, you may have to install more dependencies. For a complete list of dependencies please check wxPython's official documentation on dependencies before installing. Particularly under this section . If they are out of date, please contact the wxPython team for better instructions.","title":"Manual"},{"location":"installation/#macos-prerequisites","text":"On macOS, Rummage uses either pure Python modules, or modules that provide wheels. What this means is that no C code compilation is required to install Rummage; therefore, no prior steps are needed. But if you want to install regex , there will be some C code compilation performed by pip which will require Xcode to be installed. Download Xcode from the Mac App Store. Navigate to Xcode > Preferences > Downloads tab. Click the button to install the Command Line Tools. Open Terminal (Applications/Terminal) and run xcode-select --install . You will be prompted to install the Xcode Command Line Tools.","title":"macOS Prerequisites"},{"location":"preferences/","text":"Settings Overview The Preference dialog is found in the menu at File\u2192Preferences and contains all of the global options that can be configured. General The General tab contains a couple of useful settings. Single Instance By default, Rummage will allow for multiple windows to be open. If this option is enabled, the first window will be be the only window to open. All subsequent instances will pass their arguments to the first and close without showing a window. Language Rummage has internal support to display dialog labels in different languages. Currently Rummage has English. Russian is outdated but includes a fair bit of the needed translations. See Localization to learn more about improving current translations or adding additional translations. Updates Controls whether Rummage will check for new updates daily and allows controlling whether you want to be notified of prereleases as well. A button has also been provided to check for updates right away after configuring your update settings. The check is only a check for new versions and doesn't perform an upgrade. Rummage must be upgraded via pip from command line. Update Issues: Python 3.6+ on macOS There is a small issue on macOS with Python 3.6+: Python 3.6 changed how it gets the default certificates required to properly check URLs. The details are actually documented here: https://bugs.python.org/issue28150#msg276516 . It is possible that a given installation method resolves this automatically, but if not, the following steps should help. Assuming that Python 3.6+ was installed using the macOS installer from Python.org, you just need to navigate to /Applications/Python 3.6/Install Certificates.command and double click the command. The script will use pip to install certifi and creates a symlink in the OpenSSL directory to certifi 's installed bundle location. If you are using something like macports, then you'll probably have to research to find out how to do the same thing. International Time Rummage displays file creation and modified time in the form Jul 01, 2018, 03:00:00 AM , but you can enable this option to display the times in international format: 2018-07-01 03:00:00 . Search The Regular Expression panel is where the desired regular expression engine that Rummage uses can be selected and configured. By default, Rummage will use Re, but if the Regex module is installed in your Python installation, it can be selected instead. There is also the option of using Re or Regex with Backrefs (a wrapper that adds a couple of special escapes and features). If using Regex, you can set it to the version of your choice. V0 tries to be completely compatible with Re patterns with non-breaking additional features, while V1 breaks compatibility with Re and adds even more useful features. Please see Regex documentation to learn more. Under File/Folder Matching are a number options for file and folder matching patterns. Follow the links to learn more about each feature: Extended match . Brace expansion . Case sensitive for wildcard match and for regular expression match . Globstar . Exclude with - which is the default. Match base . Full path directory matching . Full path file matching . Pattern limit Encoding The Encoding panel is where you can tweak encoding detection. You can change the default encoding detection used (assuming you have both Chardet and cChardet installed). By default, Rummage will use the fastest (cChardet). Special encoding file type considerations are also exposed here. File extensions assigned to either HTML, XML, or Python will use special logic to look for encoding declarations in the file's header, while file extensions assigned to binary will shortcut the encoding selection to binary. Just double click the file type whose extensions you would like to modify. Remember that encoding detection is far from bulletproof and can pick an incorrect encoding. While during searches it might not be as big an issue, it is strongly suggested you use a forced encoding when performing replaces. Editor The Editor panel allows you to configure the editor that will be used to open files. To setup, simply enter the path to the editor and the options it should be called with. Once done, press the save button. As noted in the image above, Rummage provides three special variables that can be used to insert the file name, line number, or column number. Argument Variables Description {$file} Insert the file name. {$line} Insert the line number. {$col} Insert the column number. {$col0} Insert the line column offset by one so the first column is zero instead of one. New 4.7.0 Added {$col0} for zero based column values. Notifications The Notification panel controls configuration of notifications. You can enable/disable visual notifications and/or audible notification sounds (you must configure which sound to use). On Linux, you can set your preferred player: paplay , aplay , and play ( sox ). A test button is provided to test the configuration once set. Supported Notification Sound Formats Windows macOS Linux wav wav , mp3 and .aiff wav and mp3 (if using paplay , ogg is also supported) Linux Native: Notifications via notify-send . Other Distros Though Rummage should run on any Linux distro, the native notification option was built around notify-send and only tested on Ubuntu. If other distros have a notify-send it may also work. macOS Native: Notification Center via terminal-notifier . Path to terminal-notifier must be configured. Configuring macOS Native When selecting native on macOS, an option to select the path to terminal notifier will be available since native dialogs rely on terminal-notifier to send notifications to the Notification Center. This must be configured or native notifications will not work. When selecting the terminal-notifier path, you can select either the binary directly or the .<app bundle (depending on how you installed terminal-notifier ). When selecting the .app bundle, Rummage will know how to access the binary inside the bundle. Windows Native: Native windows taskbar notifications. History The History panel is where all text box, drop down history can be cleared. Backups The Backups panel allows you to configure where Rummage creates backups. You can control whether backups are all placed in the same folder as the original source, or if they are put into a subfolder. You can also configure the name of the subfolder used or the extension used when not writing to a subfolder. Import/Export Settings If desired, Rummage's settings can be exported to a JSON file or imported from a JSON file. This can be particularly useful for importing regular expression patterns from one system into another system's existing regular expression list. This can also be useful if you have a lot of regular expression patterns you wish to create, and it would be too cumbersome to do it through the GUI. In the latter case, you could construct the pattern configurations in a JSON file and import all the patterns in one shot. Import and export are broken up into three types of settings: general settings, chains, and searches. General settings are the basic feature configurations for Rummage. Chains contains all of your configured pattern chains. And searches is the actual configured search and replaces. When exporting, you will be presented with a dialog allowing you to select which categories of settings you wish to export. When importing, you will be prompted to select the settings file to import. Then you will be asked to select one or more settings categories to import. Rummage will skip any malformed or invalid settings. If you are going to overwrite an existing chain or search, it will prompt you whether to proceed with the overwrite. Afterwards, it will output the import results in the text box. The general settings are meant to be transferred between installations, not specifically configured by hand, so all the supported settings will not be covered here, but the chain and search format will be discussed in details. The chain format for importing is shown below: { \"chains\" : { // The key that denotes this setting is the \"chains\" setting. \"a-chain\" : [ // Unique chain ID. Must be composed of letters, numbers, underscores, and hyphens. \"example-1\" , // A list of references to specific unique search IDs. \"example-2\" ], \"another-chain\" : [ \"example-3\" , \"example-4\" ] } } The search/replace format for importing is show below: { \"saved_searches\" : { // The key that denotes this setting is the \"chains\" setting. \"Copyright-update\" : { // Unique search ID. Must be composed of letters, numbers, underscores, and hyphens. \"flags\" : \"is\" , // Search and replace flags (covered below). \"is_function\" : false , // Boolean stating whether the replace pattern is a function or not. \"is_regex\" : true , // Boolean stating whether the search pattern is a regular expression or literal string. \"name\" : \"Copyright update\" , // A more user friendly name or description of the pattern. \"replace\" : \"\\\\g<1>16\" , // The replace pattern, or in case `is_function` is `true`, the path to the Python replace plugin file. \"search\" : \"(Copyright \\\\(c\\\\) \\\\d+ - 20)(\\\\d{2})\" // The search pattern. } } } Below is a table containing valid flags for the flags parameter. Literal searches only allow flags i , u , and f . Regular expression patterns can use i , u , f , s , b , e , w , r , p , and F (though flags are applicable depending on whether you are using Re, Regex, or one of the two with Backrefs). Flags Supported Libraries Option i All Search case-sensitive. u All Use Unicode properties. s All Dot matches newline. f Regex, Regex + Backrefs Full case-folding. b Regex, Regex + Backrefs Best fuzzy match. e Regex, Regex + Backrefs Improve fuzzy fit. w Regex, Regex + Backrefs Unicode word breaks. r Regex, Regex + Backrefs Search backwards. p Regex, Regex + Backrefs Use POSIX matching. F Regex, Regex + Backrefs, Re + Backrefs Format style replacements.","title":"Settings"},{"location":"preferences/#settings","text":"","title":"Settings"},{"location":"preferences/#overview","text":"The Preference dialog is found in the menu at File\u2192Preferences and contains all of the global options that can be configured.","title":"Overview"},{"location":"preferences/#general","text":"The General tab contains a couple of useful settings. Single Instance By default, Rummage will allow for multiple windows to be open. If this option is enabled, the first window will be be the only window to open. All subsequent instances will pass their arguments to the first and close without showing a window. Language Rummage has internal support to display dialog labels in different languages. Currently Rummage has English. Russian is outdated but includes a fair bit of the needed translations. See Localization to learn more about improving current translations or adding additional translations. Updates Controls whether Rummage will check for new updates daily and allows controlling whether you want to be notified of prereleases as well. A button has also been provided to check for updates right away after configuring your update settings. The check is only a check for new versions and doesn't perform an upgrade. Rummage must be upgraded via pip from command line. Update Issues: Python 3.6+ on macOS There is a small issue on macOS with Python 3.6+: Python 3.6 changed how it gets the default certificates required to properly check URLs. The details are actually documented here: https://bugs.python.org/issue28150#msg276516 . It is possible that a given installation method resolves this automatically, but if not, the following steps should help. Assuming that Python 3.6+ was installed using the macOS installer from Python.org, you just need to navigate to /Applications/Python 3.6/Install Certificates.command and double click the command. The script will use pip to install certifi and creates a symlink in the OpenSSL directory to certifi 's installed bundle location. If you are using something like macports, then you'll probably have to research to find out how to do the same thing. International Time Rummage displays file creation and modified time in the form Jul 01, 2018, 03:00:00 AM , but you can enable this option to display the times in international format: 2018-07-01 03:00:00 .","title":"General"},{"location":"preferences/#search","text":"The Regular Expression panel is where the desired regular expression engine that Rummage uses can be selected and configured. By default, Rummage will use Re, but if the Regex module is installed in your Python installation, it can be selected instead. There is also the option of using Re or Regex with Backrefs (a wrapper that adds a couple of special escapes and features). If using Regex, you can set it to the version of your choice. V0 tries to be completely compatible with Re patterns with non-breaking additional features, while V1 breaks compatibility with Re and adds even more useful features. Please see Regex documentation to learn more. Under File/Folder Matching are a number options for file and folder matching patterns. Follow the links to learn more about each feature: Extended match . Brace expansion . Case sensitive for wildcard match and for regular expression match . Globstar . Exclude with - which is the default. Match base . Full path directory matching . Full path file matching . Pattern limit","title":"Search"},{"location":"preferences/#encoding","text":"The Encoding panel is where you can tweak encoding detection. You can change the default encoding detection used (assuming you have both Chardet and cChardet installed). By default, Rummage will use the fastest (cChardet). Special encoding file type considerations are also exposed here. File extensions assigned to either HTML, XML, or Python will use special logic to look for encoding declarations in the file's header, while file extensions assigned to binary will shortcut the encoding selection to binary. Just double click the file type whose extensions you would like to modify. Remember that encoding detection is far from bulletproof and can pick an incorrect encoding. While during searches it might not be as big an issue, it is strongly suggested you use a forced encoding when performing replaces.","title":"Encoding"},{"location":"preferences/#editor","text":"The Editor panel allows you to configure the editor that will be used to open files. To setup, simply enter the path to the editor and the options it should be called with. Once done, press the save button. As noted in the image above, Rummage provides three special variables that can be used to insert the file name, line number, or column number. Argument Variables Description {$file} Insert the file name. {$line} Insert the line number. {$col} Insert the column number. {$col0} Insert the line column offset by one so the first column is zero instead of one. New 4.7.0 Added {$col0} for zero based column values.","title":"Editor"},{"location":"preferences/#notifications","text":"The Notification panel controls configuration of notifications. You can enable/disable visual notifications and/or audible notification sounds (you must configure which sound to use). On Linux, you can set your preferred player: paplay , aplay , and play ( sox ). A test button is provided to test the configuration once set. Supported Notification Sound Formats Windows macOS Linux wav wav , mp3 and .aiff wav and mp3 (if using paplay , ogg is also supported) Linux Native: Notifications via notify-send . Other Distros Though Rummage should run on any Linux distro, the native notification option was built around notify-send and only tested on Ubuntu. If other distros have a notify-send it may also work. macOS Native: Notification Center via terminal-notifier . Path to terminal-notifier must be configured. Configuring macOS Native When selecting native on macOS, an option to select the path to terminal notifier will be available since native dialogs rely on terminal-notifier to send notifications to the Notification Center. This must be configured or native notifications will not work. When selecting the terminal-notifier path, you can select either the binary directly or the .<app bundle (depending on how you installed terminal-notifier ). When selecting the .app bundle, Rummage will know how to access the binary inside the bundle. Windows Native: Native windows taskbar notifications.","title":"Notifications"},{"location":"preferences/#history","text":"The History panel is where all text box, drop down history can be cleared.","title":"History"},{"location":"preferences/#backups","text":"The Backups panel allows you to configure where Rummage creates backups. You can control whether backups are all placed in the same folder as the original source, or if they are put into a subfolder. You can also configure the name of the subfolder used or the extension used when not writing to a subfolder.","title":"Backups"},{"location":"preferences/#importexport-settings","text":"If desired, Rummage's settings can be exported to a JSON file or imported from a JSON file. This can be particularly useful for importing regular expression patterns from one system into another system's existing regular expression list. This can also be useful if you have a lot of regular expression patterns you wish to create, and it would be too cumbersome to do it through the GUI. In the latter case, you could construct the pattern configurations in a JSON file and import all the patterns in one shot. Import and export are broken up into three types of settings: general settings, chains, and searches. General settings are the basic feature configurations for Rummage. Chains contains all of your configured pattern chains. And searches is the actual configured search and replaces. When exporting, you will be presented with a dialog allowing you to select which categories of settings you wish to export. When importing, you will be prompted to select the settings file to import. Then you will be asked to select one or more settings categories to import. Rummage will skip any malformed or invalid settings. If you are going to overwrite an existing chain or search, it will prompt you whether to proceed with the overwrite. Afterwards, it will output the import results in the text box. The general settings are meant to be transferred between installations, not specifically configured by hand, so all the supported settings will not be covered here, but the chain and search format will be discussed in details. The chain format for importing is shown below: { \"chains\" : { // The key that denotes this setting is the \"chains\" setting. \"a-chain\" : [ // Unique chain ID. Must be composed of letters, numbers, underscores, and hyphens. \"example-1\" , // A list of references to specific unique search IDs. \"example-2\" ], \"another-chain\" : [ \"example-3\" , \"example-4\" ] } } The search/replace format for importing is show below: { \"saved_searches\" : { // The key that denotes this setting is the \"chains\" setting. \"Copyright-update\" : { // Unique search ID. Must be composed of letters, numbers, underscores, and hyphens. \"flags\" : \"is\" , // Search and replace flags (covered below). \"is_function\" : false , // Boolean stating whether the replace pattern is a function or not. \"is_regex\" : true , // Boolean stating whether the search pattern is a regular expression or literal string. \"name\" : \"Copyright update\" , // A more user friendly name or description of the pattern. \"replace\" : \"\\\\g<1>16\" , // The replace pattern, or in case `is_function` is `true`, the path to the Python replace plugin file. \"search\" : \"(Copyright \\\\(c\\\\) \\\\d+ - 20)(\\\\d{2})\" // The search pattern. } } } Below is a table containing valid flags for the flags parameter. Literal searches only allow flags i , u , and f . Regular expression patterns can use i , u , f , s , b , e , w , r , p , and F (though flags are applicable depending on whether you are using Re, Regex, or one of the two with Backrefs). Flags Supported Libraries Option i All Search case-sensitive. u All Use Unicode properties. s All Dot matches newline. f Regex, Regex + Backrefs Full case-folding. b Regex, Regex + Backrefs Best fuzzy match. e Regex, Regex + Backrefs Improve fuzzy fit. w Regex, Regex + Backrefs Unicode word breaks. r Regex, Regex + Backrefs Search backwards. p Regex, Regex + Backrefs Use POSIX matching. F Regex, Regex + Backrefs, Re + Backrefs Format style replacements.","title":"Import/Export Settings"},{"location":"search/","text":"Search Features Search Options Rummage supports the default regular expression library ( Re ) that comes with Python and the 3 rd party Regex library, and though the basic syntax and features are similar between the two, Regex provides many additional features, some of which causes the syntax to deviate greatly from Re. If you are using Re, you will not see all the options shown below. Please check out documentation for whichever engine you have chosen use in order to learn more about its specific feature set. This documentation will only briefly cover the features that can be enabled in each engine. Common Options Both the Re and Regex engine have a couple of shared flags that are exposed in Rummage as checkboxes. These checkboxes are found directly under the search and replace text boxes. Toggle Description Search with regex Alters the behavior of Search for and Replace with . When this is checked, both text boxes require regular expression patterns opposed to literal string. Search case-sensitive Forces the search to be case-sensitive. Dot matches newline . will also match newlines in regular expressions. Use Unicode properties Changes the regular expression behavior of \\w , \\W , \\b , \\B , \\d , \\D , \\s , and \\S to use characters from the Unicode property database (will also affect \\l , \\L , \\c , and \\C in search patterns if using Backrefs with Re). Format style replacements Replace pattern will use a string replace format for replace. \" {1} {1[-2]} {group_name[-3]} \" etc. This is not available for Re without Backrefs, and is limited when using Re with Backrefs. Read more about format mode here . And remember that Rummage normalizes differences in Backrefs' and Regex's handling of back slash escapes in format replace mode. Regex Engine Options If the Regex engine is being used for regular expressions, a couple of extra checkboxes will be available. Regex can be run in either VERSION0 or VERSION1 mode. VERSION0 is compatible with Re regular expression patterns and has the extra fullcase toggle. VERSION1 does not have this toggle as it is enabled by default and can only be disabled inline via a pattern of (?-f) . VERSION1 is not directly compatible with Re patterns as it adds a number of changes to the syntax allowing for more advanced search options. Toggle Description Best fuzzy match If performing a fuzzy match, the best fuzzy match will be returned. Improve fuzzy fit Makes fuzzy matching attempt to improve the fit of the next match that it finds. Unicode word breaks Will use proper Unicode word breaks and line separators when Unicode is enabled. See Regex documentation for more info. Use POSIX matching Use the POSIX standard for regular expression, which is to return the leftmost longest match. Search backwards Search backwards. The result of a reverse search is not necessarily the reverse of a forward search. Full case-folding Use full case folding. For Regex V0 only as it is enabled by default for V1 . Rummage Options Rummage has a couple of flags that are not specific to the regular expression engine. Toggle Description Boolean match Will check each file up until the first match and will halt searching further. No line context info will be gathered or displayed. Does not apply when performing replaces. Count only Will just count the number of matches in the file and will not display line context information. This has no effect when applying replaces. Create backups On replace, files with matches will be backed up before applying the replacements; backup files will have the .rum-bak extension. Force <encoding> Forces all files to be opened with the specified encoding opposed to trying to detect the encoding. Encoding is hard and slow, so this is the preferred method for fast searches. On failure, binary will be used instead. Use chain search Puts Rummage into \"search chain\" mode . When in \"search chain\" mode, rummage will only use saved search chains for search and replace. Use replace plugin When enabled, Rummage will use a replace plugin instead of a replace pattern in order to do more advanced replaces. Encoding Guessing It is always recommended, if you know the encoding, to use Force encoding as it will always be the fastest. Encoding guessing can be slow and not always accurate. Encoding guessing is performed by chardet which is a pure Python library and is, by far, the slowest option. If you manually install cChardet , you will have a much faster guessing experience. File Patterns Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. Wildcard patterns and regular expression patterns will each be covered separately. Wildcard Rummage uses file patterns with optional folder exclude patterns to filter which files are searched. The default is to use wild card patterns modeled after fnmatch and glob . Below is a list of the syntax that is accepted, but not all features are enabled by default. If you would prefer regular expression file patterns, please see Regular Expression file patterns. File patterns are case insensitive by default, even for Linux/Unix systems. Case sensitivity can be enabled in Preferences . Slashes are generally treated as normal characters, but on windows they will be normalized: / will become \\\\ . There is no need to explicitly use \\\\ in patterns on Windows, but if you do, it will be handled. . is always matched by * , ? , [] , etc. To prevent hidden files from being matched, you should uncheck the \"Include hidden\" option. Basic Wildcard syntax Rummage uses the wcmatch library to implement a specialized version of fnmatch wildcard patterns for file name matching. Pattern Meaning * Matches everything. ? Matches any single character. [seq] Matches any character in seq. [!seq] Matches any character not in seq. [[:alnum:]] POSIX style character classes inside sequences. The C locale is used for byte strings and Unicode properties for Unicode strings. See POSIX Character Classes in wcmatch 's documentation for more info. \\ Escapes characters. If applied to a meta character, it will be treated as a normal character. | Multiple patterns can be provided by separating them with | . - / ! By default, if - is found at the start of a pattern, it will match the inverse. This can be changed to use ! instead in Preferences . \\xhh By specifying \\x followed by the hexadecimal byte value, you can specify characters directly. \\uhhhh By specifying \\u with the four value hexadecimal character value, you can specify Unicode characters directly. \\Uhhhhhhhh By specifying \\U with the eight value hexadecimal character value, you can specify wide Unicode characters directly. \\N{name} By specifying \\N{name} , where name is a valid Unicode character name, you can specify Unicode characters directly. \\a ASCII Bell (BEL). \\b ASCII Backspace (BS). \\f ASCII Formfeed (FF). \\n ASCII Linefeed (LF). \\r ASCII Carriage Return (CR). \\t ASCII Horizontal Tab (TAB). \\v ASCII Vertical Tab (VT). Example Patterns Used in the Files which match box, this would match all Python files of .py extensions excluding __init__.py : *.py|-__init__.py Used in the Files which match box, this would match any file type that is not .py . -*.py Used in the Exclude folders , this would exclude all folders with name followed by a single digit, except name3 which we will always be included. name[0-9]|-name3 Used in the Exclude folders , this would exclude all folders except name3 . -name3 If you need to escape - or | , you can put them in a sequence: [-|] . Remember to place - at the beginning of a sequence as - is also used to specify character ranges: [a-z] . Extended Match Syntax In Preferences , you can also enable extended match patterns. Extended match patterns allow you to provide pattern lists to provide more advanced logic. Pattern Meaning ?(pattern_list) The pattern matches if zero or one occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. *(pattern_list) The pattern matches if zero or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. +(pattern_list) The pattern matches if one or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. @(pattern_list) The pattern matches if exactly one occurrence of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. !(pattern_list) The pattern matches if the input string cannot be matched with any of the patterns in the pattern_list . Requires extended match feature to be enabled. {} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. Example Extended Match Patterns For example, if we wanted to match files this-file.txt and that-file.txt , we could provide the following pattern: @(this|that)-file.txt The | contained within an extended match group will not split the pattern. So it is safe to combine with other patterns: @(this|that)-file.txt|*.py ! and Extended Match Syntax If you have changed Rummage to use ! instead of - for exclusion patterns and have enabled extended match patterns, you must escape ( at the start of a file if you want the pattern to be recognized as an exclusion pattern instead of treating it as the start of an extended match pattern ( !(...) ). Brace Expansion Syntax In Preferences , you can enables Bash style brace expansion. Brace expansion is applied before anything else. When applied, a pattern will be expanded into multiple patterns. Each pattern will then be parsed separately. This is great for specifying complex combinations of patterns: a{b,{c,d}} \u2192 ab ac ad . For simple patterns, it may make more sense to use extended match patterns which will only generate a single pattern and be quicker to evaluate: @(ab|ac|ad) . Be careful with patterns such as {1..100} which would generate one hundred patterns that will all get individually parsed. Sometimes you really need such a pattern, but be mindful that it will be slower as you generate larger sets of patterns. Pattern Meaning {,} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. {n1..n2[..i]} Bash style sequences that expands a range of numbers or alphabetic characters by an optional increment. Example Brace Expansion a{b,{c,d}} \u2192 ab ac ad {1..3} \u2192 1 2 3 {a..d} \u2192 a b c d {2..4..2} \u2192 2 4 {a..e..2} \u2192 a c e Full Path Matching In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder of /My/base/path to search, and as Rummage was crawling directories, it needed to evaluate the file /My/base/path/some/file.txt , normally your provided file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt (which is relative portion to your base path). This means you'd have to use pattern like */*.txt instead of *.txt . When full path matching is enabled for a pattern, slashes are generally treated special. Slashes will not be matched in [] , * , ? , or in extended patterns like *(...) . Slashes can be matched by ** if the \"globstar ( ** )\"\" option is enabled in Preferences . When full path matching is not enabled, wildcard patterns use base matching. That is to say, the wildcard patterns are applied to the base filename instead of the full path. If you enable base matching for full paths in Preferences , if a pattern has no slashes, it will perform base matching, and if there are slashes, it will perform a full path match. This allows you to have the best of both worlds. For instance, the following pattern would match all Markdown files under the document directory, but would exclude any file in any subdirectory under docs whose name starts with c : docs/**/*.md|-c* . Full path is used for the docs/**/*.md pattern while base matching is used for -c* . Full path matching can be enabled for both file the file pattern box and the folder exclude box. Each can be controlled separately in Preferences . To learn more about full path matching with regular expression, checkout the regular expression section . Pattern Limit Glob style patterns, by default, allow expanding a pattern by splitting on | or expanding the pattern with brace expansion: a{b,c} \u2192 ab ac . This can turn one pattern into many patterns. The underlying expansion code limits expansion to 1000 patterns. This limit can be configured in Preferences . To raise or lower the limit, simply set the value higher or lower. To disable the limit entirely, set it to 0 . Regular Expression Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. The regular expression engine set in Preferences is what will be used for file patterns. It will also respect the case sensitivity setting in Preferences for File/Folder Matching . Full Path Matching In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder to search of /My/base/path , and as Rummage was crawling directories, it needed to evaluate the file /My/base/path/some/file.txt , normally your file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt . This means you'd have to use a pattern like .*/.*.txt instead of .*.txt . Backrefs Rummage has the option of using a special wrapper called Backrefs. Backrefs can be applied to either Re or Regex. It adds various back references that are known to some regular expression engines, but not to Python's Re or Regex modules. The supported back references actually vary depending on whether it is being applied to Re or Regex. For instance, Backrefs only adds Unicode Properties to Re since Regex already has Unicode properties. To learn more about what Backrefs adds, read the official Backrefs documentation . You can enable extended back references in the Preferences dialog.","title":"Search Features"},{"location":"search/#search-features","text":"","title":"Search Features"},{"location":"search/#search-options","text":"Rummage supports the default regular expression library ( Re ) that comes with Python and the 3 rd party Regex library, and though the basic syntax and features are similar between the two, Regex provides many additional features, some of which causes the syntax to deviate greatly from Re. If you are using Re, you will not see all the options shown below. Please check out documentation for whichever engine you have chosen use in order to learn more about its specific feature set. This documentation will only briefly cover the features that can be enabled in each engine.","title":"Search Options"},{"location":"search/#common-options","text":"Both the Re and Regex engine have a couple of shared flags that are exposed in Rummage as checkboxes. These checkboxes are found directly under the search and replace text boxes. Toggle Description Search with regex Alters the behavior of Search for and Replace with . When this is checked, both text boxes require regular expression patterns opposed to literal string. Search case-sensitive Forces the search to be case-sensitive. Dot matches newline . will also match newlines in regular expressions. Use Unicode properties Changes the regular expression behavior of \\w , \\W , \\b , \\B , \\d , \\D , \\s , and \\S to use characters from the Unicode property database (will also affect \\l , \\L , \\c , and \\C in search patterns if using Backrefs with Re). Format style replacements Replace pattern will use a string replace format for replace. \" {1} {1[-2]} {group_name[-3]} \" etc. This is not available for Re without Backrefs, and is limited when using Re with Backrefs. Read more about format mode here . And remember that Rummage normalizes differences in Backrefs' and Regex's handling of back slash escapes in format replace mode.","title":"Common Options"},{"location":"search/#regex-engine-options","text":"If the Regex engine is being used for regular expressions, a couple of extra checkboxes will be available. Regex can be run in either VERSION0 or VERSION1 mode. VERSION0 is compatible with Re regular expression patterns and has the extra fullcase toggle. VERSION1 does not have this toggle as it is enabled by default and can only be disabled inline via a pattern of (?-f) . VERSION1 is not directly compatible with Re patterns as it adds a number of changes to the syntax allowing for more advanced search options. Toggle Description Best fuzzy match If performing a fuzzy match, the best fuzzy match will be returned. Improve fuzzy fit Makes fuzzy matching attempt to improve the fit of the next match that it finds. Unicode word breaks Will use proper Unicode word breaks and line separators when Unicode is enabled. See Regex documentation for more info. Use POSIX matching Use the POSIX standard for regular expression, which is to return the leftmost longest match. Search backwards Search backwards. The result of a reverse search is not necessarily the reverse of a forward search. Full case-folding Use full case folding. For Regex V0 only as it is enabled by default for V1 .","title":"Regex Engine Options"},{"location":"search/#rummage-options","text":"Rummage has a couple of flags that are not specific to the regular expression engine. Toggle Description Boolean match Will check each file up until the first match and will halt searching further. No line context info will be gathered or displayed. Does not apply when performing replaces. Count only Will just count the number of matches in the file and will not display line context information. This has no effect when applying replaces. Create backups On replace, files with matches will be backed up before applying the replacements; backup files will have the .rum-bak extension. Force <encoding> Forces all files to be opened with the specified encoding opposed to trying to detect the encoding. Encoding is hard and slow, so this is the preferred method for fast searches. On failure, binary will be used instead. Use chain search Puts Rummage into \"search chain\" mode . When in \"search chain\" mode, rummage will only use saved search chains for search and replace. Use replace plugin When enabled, Rummage will use a replace plugin instead of a replace pattern in order to do more advanced replaces. Encoding Guessing It is always recommended, if you know the encoding, to use Force encoding as it will always be the fastest. Encoding guessing can be slow and not always accurate. Encoding guessing is performed by chardet which is a pure Python library and is, by far, the slowest option. If you manually install cChardet , you will have a much faster guessing experience.","title":"Rummage Options"},{"location":"search/#file-patterns","text":"Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. Wildcard patterns and regular expression patterns will each be covered separately.","title":"File Patterns"},{"location":"search/#wildcard","text":"Rummage uses file patterns with optional folder exclude patterns to filter which files are searched. The default is to use wild card patterns modeled after fnmatch and glob . Below is a list of the syntax that is accepted, but not all features are enabled by default. If you would prefer regular expression file patterns, please see Regular Expression file patterns. File patterns are case insensitive by default, even for Linux/Unix systems. Case sensitivity can be enabled in Preferences . Slashes are generally treated as normal characters, but on windows they will be normalized: / will become \\\\ . There is no need to explicitly use \\\\ in patterns on Windows, but if you do, it will be handled. . is always matched by * , ? , [] , etc. To prevent hidden files from being matched, you should uncheck the \"Include hidden\" option.","title":"Wildcard"},{"location":"search/#basic-wildcard-syntax","text":"Rummage uses the wcmatch library to implement a specialized version of fnmatch wildcard patterns for file name matching. Pattern Meaning * Matches everything. ? Matches any single character. [seq] Matches any character in seq. [!seq] Matches any character not in seq. [[:alnum:]] POSIX style character classes inside sequences. The C locale is used for byte strings and Unicode properties for Unicode strings. See POSIX Character Classes in wcmatch 's documentation for more info. \\ Escapes characters. If applied to a meta character, it will be treated as a normal character. | Multiple patterns can be provided by separating them with | . - / ! By default, if - is found at the start of a pattern, it will match the inverse. This can be changed to use ! instead in Preferences . \\xhh By specifying \\x followed by the hexadecimal byte value, you can specify characters directly. \\uhhhh By specifying \\u with the four value hexadecimal character value, you can specify Unicode characters directly. \\Uhhhhhhhh By specifying \\U with the eight value hexadecimal character value, you can specify wide Unicode characters directly. \\N{name} By specifying \\N{name} , where name is a valid Unicode character name, you can specify Unicode characters directly. \\a ASCII Bell (BEL). \\b ASCII Backspace (BS). \\f ASCII Formfeed (FF). \\n ASCII Linefeed (LF). \\r ASCII Carriage Return (CR). \\t ASCII Horizontal Tab (TAB). \\v ASCII Vertical Tab (VT). Example Patterns Used in the Files which match box, this would match all Python files of .py extensions excluding __init__.py : *.py|-__init__.py Used in the Files which match box, this would match any file type that is not .py . -*.py Used in the Exclude folders , this would exclude all folders with name followed by a single digit, except name3 which we will always be included. name[0-9]|-name3 Used in the Exclude folders , this would exclude all folders except name3 . -name3 If you need to escape - or | , you can put them in a sequence: [-|] . Remember to place - at the beginning of a sequence as - is also used to specify character ranges: [a-z] .","title":"Basic Wildcard syntax"},{"location":"search/#extended-match-syntax","text":"In Preferences , you can also enable extended match patterns. Extended match patterns allow you to provide pattern lists to provide more advanced logic. Pattern Meaning ?(pattern_list) The pattern matches if zero or one occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. *(pattern_list) The pattern matches if zero or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. +(pattern_list) The pattern matches if one or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. @(pattern_list) The pattern matches if exactly one occurrence of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. !(pattern_list) The pattern matches if the input string cannot be matched with any of the patterns in the pattern_list . Requires extended match feature to be enabled. {} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. Example Extended Match Patterns For example, if we wanted to match files this-file.txt and that-file.txt , we could provide the following pattern: @(this|that)-file.txt The | contained within an extended match group will not split the pattern. So it is safe to combine with other patterns: @(this|that)-file.txt|*.py ! and Extended Match Syntax If you have changed Rummage to use ! instead of - for exclusion patterns and have enabled extended match patterns, you must escape ( at the start of a file if you want the pattern to be recognized as an exclusion pattern instead of treating it as the start of an extended match pattern ( !(...) ).","title":"Extended Match Syntax"},{"location":"search/#brace-expansion-syntax","text":"In Preferences , you can enables Bash style brace expansion. Brace expansion is applied before anything else. When applied, a pattern will be expanded into multiple patterns. Each pattern will then be parsed separately. This is great for specifying complex combinations of patterns: a{b,{c,d}} \u2192 ab ac ad . For simple patterns, it may make more sense to use extended match patterns which will only generate a single pattern and be quicker to evaluate: @(ab|ac|ad) . Be careful with patterns such as {1..100} which would generate one hundred patterns that will all get individually parsed. Sometimes you really need such a pattern, but be mindful that it will be slower as you generate larger sets of patterns. Pattern Meaning {,} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. {n1..n2[..i]} Bash style sequences that expands a range of numbers or alphabetic characters by an optional increment. Example Brace Expansion a{b,{c,d}} \u2192 ab ac ad {1..3} \u2192 1 2 3 {a..d} \u2192 a b c d {2..4..2} \u2192 2 4 {a..e..2} \u2192 a c e","title":"Brace Expansion Syntax"},{"location":"search/#full-path-matching","text":"In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder of /My/base/path to search, and as Rummage was crawling directories, it needed to evaluate the file /My/base/path/some/file.txt , normally your provided file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt (which is relative portion to your base path). This means you'd have to use pattern like */*.txt instead of *.txt . When full path matching is enabled for a pattern, slashes are generally treated special. Slashes will not be matched in [] , * , ? , or in extended patterns like *(...) . Slashes can be matched by ** if the \"globstar ( ** )\"\" option is enabled in Preferences . When full path matching is not enabled, wildcard patterns use base matching. That is to say, the wildcard patterns are applied to the base filename instead of the full path. If you enable base matching for full paths in Preferences , if a pattern has no slashes, it will perform base matching, and if there are slashes, it will perform a full path match. This allows you to have the best of both worlds. For instance, the following pattern would match all Markdown files under the document directory, but would exclude any file in any subdirectory under docs whose name starts with c : docs/**/*.md|-c* . Full path is used for the docs/**/*.md pattern while base matching is used for -c* . Full path matching can be enabled for both file the file pattern box and the folder exclude box. Each can be controlled separately in Preferences . To learn more about full path matching with regular expression, checkout the regular expression section .","title":"Full Path Matching"},{"location":"search/#pattern-limit","text":"Glob style patterns, by default, allow expanding a pattern by splitting on | or expanding the pattern with brace expansion: a{b,c} \u2192 ab ac . This can turn one pattern into many patterns. The underlying expansion code limits expansion to 1000 patterns. This limit can be configured in Preferences . To raise or lower the limit, simply set the value higher or lower. To disable the limit entirely, set it to 0 .","title":"Pattern Limit"},{"location":"search/#regular-expression","text":"Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. The regular expression engine set in Preferences is what will be used for file patterns. It will also respect the case sensitivity setting in Preferences for File/Folder Matching .","title":"Regular Expression"},{"location":"search/#full-path-matching_1","text":"In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder to search of /My/base/path , and as Rummage was crawling directories, it needed to evaluate the file /My/base/path/some/file.txt , normally your file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt . This means you'd have to use a pattern like .*/.*.txt instead of .*.txt .","title":"Full Path Matching"},{"location":"search/#backrefs","text":"Rummage has the option of using a special wrapper called Backrefs. Backrefs can be applied to either Re or Regex. It adds various back references that are known to some regular expression engines, but not to Python's Re or Regex modules. The supported back references actually vary depending on whether it is being applied to Re or Regex. For instance, Backrefs only adds Unicode Properties to Re since Regex already has Unicode properties. To learn more about what Backrefs adds, read the official Backrefs documentation . You can enable extended back references in the Preferences dialog.","title":"Backrefs"},{"location":"usage/","text":"Basic Usage Overview Rummage is designed to be easy to pick up. Its interface consists of three tabs: Search, Files, and Content. In the Search tab, a user specifies where they want to search, what they want to search for, and optionally what they want to replace it with. Search features can be tweaked with various options. The files that get searched can also be narrowed with patterns and filters. Rummage uses the default regular expression library ( Re ) that comes with Python. It also optionally works with the 3 rd party Regex library (if installed). As matches are found, general info about the matches will be displayed in the Files and Content tabs. You can double click files to open them in your favorite editor (see Editor Preferences to configure Rummage for your editor). Rummage also comes with a simple regular expression tester to test out patterns. It also provides a feature where patterns can be saved for later and/or frequent use. You can even create chains that will apply a series of saved searches. Running Once Rummage is installed, you can run it from the command line (assuming your Python scripts/bin folder is in your system path): rummage If you have multiple Python versions installed, you can call Rummage for that specific Python version by appending the major and minor Python version to the end: rummage3.6 In some environments, it may make sense to run Rummage with pythonw which is mainly for launching GUI scripts ( pythonw is not available on Linux). In some environments, it may be required (see Running in Anaconda ). pythonw -m rummage Searching & Replacing Search and replaces are configured in the Search tab. The search tab can essentially be broken up into two sections: text search configuration and file search configuration. Configuring Text Search The first part of the Search tab contains mostly text search inputs, with the exception of the very first control, which is used to configure where to search. The second text box is used to specify what we are searching for in the content of each file. The last text box specified what we want to replace the found text with. Each text box retains a limited history of recent inputs that can be accessed via the drop down control to the right. The replace text box is only needed if you are performing a replace. The search input can also be omitted, and if so, Rummage will simply return files that match the provided file patterns (covered in Configuring File Search ). Below the text boxes is a collapsible panel that contains the text search options. The options consist of various checkboxes and controls that enable/disable search and replace features. The available features will vary depending on which regular expression engine you are using. Each feature is documented in Search Options . Lastly, Rummage provides buttons to launch a regular expression tester , dialogs to save or load frequently used regular expressions, and a dialog to create and manage regular expression chains . Configuring File Search The bottom part of the search tab focuses on controlling which files get searched. Various checkboxes and inputs are available that can narrow the actual files that get searched. You can filter out hidden files, symlinks, files of specific sizes, or creation/modification dates. You can also restrict which files get searched by providing wild card patterns (or regular expression if preferred). By default, the patterns are applied to the base file or folder name. See File Patterns to learn more about accepted wild card pattern syntax and how to configure optional file pattern features. Hidden Files Rummage assumes dot files as hidden on all systems. Additionally, on Windows and macOS, it will also look at a file's filesystem attributes to determine if the system is potentially hiding the file as well. New 4.4.0 Added symlink following via the Follow symlinks toggle. Results Once a search or replace is initiated, the results will begin to appear in the Files and Content tabs. You can then double click a file to open it in your editor, or right click them to bring up a context menu with additional options. Column Options You can hide/show columns by right clicking the list header to get a special context menu. You can then deselect or select the the column(s) you wish to hide/show respectively. You can also reorder the columns if desired. Regular Expression Tester Rummage comes with a simple regular expression tester. It has a simple text box to place content to search, and another text box that will show the final results after the find and replace is applied. Below those text boxes, there are two text input boxes for the find and replace patterns. Lastly, all search and replace flag options are found under the pattern input boxes. To use the tester, simply enter the content to search, set your desired options, and input your find and replace pattern. As you change your pattern or options, matches will be updated and highlighted, and the result box will be updated with any replacements. When you are satisfied with your result, click the Use button, and your pattern and settings will be populated in the main window. Saving and Loading Regular Expressions Regular expressions can be very complex, and sometimes you might want to save them for future use. When you have a pattern configured that you want to save, simply click the Save Search button and a dialog will pop up asking you to name the search. When done, click the Save button on the dialog and your search patterns and options will be saved. You'll notice that there are two input boxes. The first requires a unique name (only word characters, underscores, and hyphens are allowed). The second is an optional comment in case you wish to elaborate on what the pattern is for. Underneath the inputs will be the actual search settings being saved. To load a pattern that was saved previously, click the Load Search button. You will be presented with a dialog showing all your saved searches. Highlight the pattern you want to load and click the Load button. Your pattern and options will be populated in the main dialog. If you wish to edit the name or comment of a search, you can double click the entry or click the \"Edit\" button. Search Chains There are times you may have a task that requires you to do multiple find and replaces that are all related, but are too difficult to represent as a single find and replace. This is where search chains can be helpful. Search chains are essentially a sequence of multiple saved search and replace patterns . You can create a search chain by clicking the Search Chains button which will bring up the search chain manager. Here you can create or delete search chains. To use search chains, you must put Rummage in \"search chain\" mode by selecting the check box named Use search chains in the main window. When \"search chain\" mode is enabled, all controls that don't apply to search chains will be disabled, and the search box will be replaced with a drop down for selecting existing chains you've already created. When a search is performed, Rummage will iterate over each file with all the saved searches in the chain. Replace plugins Regular expressions are great, but sometimes regular expressions aren't enough. If you are dealing with a replace task that requires logic that cannot be represented in a simple replace pattern, you can create a \"replace plugin\". Replace plugins are written in Python and are loaded by first selecting the Use replace plugin check box in the main dialog. Then the main dialog's Replace with text box will become the Replace plugin text box with an associated file picker. Here you can point to your replace plugin file. Replace plugins aren't meant to be full, complex modules that import lots of other relative files. They are meant to be a single, compact script, but inside that script, you can import anything that is already installed in your Python environment. Writing a Plugin Replace plugins should contain two things: A plugin class derived from the rummage.lib.rumcore.ReplacePlugin class. A function called get_replace that returns your class. The plugin class is fairly straight forward and is shown below. class ReplacePlugin ( object ): \"\"\"Rummage replace plugin.\"\"\" def __init__ ( self , file_info , flags ): \"\"\"Initialize.\"\"\" self . file_info = file_info self . flags = flags self . on_init () def on_init ( self ): \"\"\"Override this function to add initialization setup.\"\"\" def get_flags ( self ): \"\"\"Get flags.\"\"\" return self . flags def get_file_name ( self ): \"\"\"Get file name.\"\"\" return self . file_info . name def is_binary ( self ): \"\"\"Is a binary search.\"\"\" return self . file_info . encoding . encode == 'bin' def is_literal ( self ): \"\"\"Is a literal search.\"\"\" return self . flags & LITERAL def replace ( self , m ): \"\"\"Make replacement.\"\"\" return m . group ( 0 ) ReplacePlugin 's replace function will receive the parameter m which is either a regex or re match object (depending on what regular expression engine is selected). The return value must be either a Unicode string or byte string (for binary files). The ReplacePlugin 's file_info property is a named tuple providing information about the current file such as name, size, creation date, etc. class FileInfoRecord ( namedtuple ( 'FileInfoRecord' , [ 'id' , 'name' , 'size' , 'modified' , 'created' , 'encoding' ])): \"\"\"A record for tracking file info.\"\"\" The ReplacePlugin 's flags property contains only Rummage search related flags (the flags are abstracted at this level and are converted to the appropriate regular expression flags later). They can also be accessed from rummage.lib.rumcore . The flags are shown below. # Common regular expression flags (re|regex) IGNORECASE = 0x1 # (?i) DOTALL = 0x2 # (?s) MULTILINE = 0x4 # (?m) UNICODE = 0x8 # (?u) # Regex module flags ASCII = 0x10 # (?a) FULLCASE = 0x20 # (?f) WORD = 0x40 # (?w) BESTMATCH = 0x80 # (?b) ENHANCEMATCH = 0x100 # (?e) REVERSE = 0x200 # (?r) VERSION0 = 0x400 # (?V0) VERSION1 = 0x800 # (?V1) FORMATREPLACE = 0x1000 # Use {1} for groups in replace POSIX = 0x2000 # (?p) # Rumcore search related flags LITERAL = 0x10000 # Literal search Example Plugin In the example below, we have a replace plugin that replaces the search result with the name of the file. It is assumed this is not a binary replace, so a Unicode string is returned. from __future__ import unicode_literals from rummage.lib import rumcore import os class TestReplace ( rumcore . ReplacePlugin ): \"\"\"Replace object.\"\"\" def replace ( self , m ): \"\"\"Replace method.\"\"\" name = os . path . basename ( self . get_file_name ()) return name def get_replace (): \"\"\"Get the replace object.\"\"\" return TestReplace Export to CSV or HTML Rummage allows the exporting of the results to either CSV or HTML. Simply select File\u2192Export and pick either CSV or HTML . The HTML output will be styled similar to the GUI interface with the results in tables with sortable columns. Large Result Sets Really, really large sets of results will probably be best suited for CSV as a browser may have a hard time loading the entire data set at once.","title":"Basic Usage"},{"location":"usage/#basic-usage","text":"","title":"Basic Usage"},{"location":"usage/#overview","text":"Rummage is designed to be easy to pick up. Its interface consists of three tabs: Search, Files, and Content. In the Search tab, a user specifies where they want to search, what they want to search for, and optionally what they want to replace it with. Search features can be tweaked with various options. The files that get searched can also be narrowed with patterns and filters. Rummage uses the default regular expression library ( Re ) that comes with Python. It also optionally works with the 3 rd party Regex library (if installed). As matches are found, general info about the matches will be displayed in the Files and Content tabs. You can double click files to open them in your favorite editor (see Editor Preferences to configure Rummage for your editor). Rummage also comes with a simple regular expression tester to test out patterns. It also provides a feature where patterns can be saved for later and/or frequent use. You can even create chains that will apply a series of saved searches.","title":"Overview"},{"location":"usage/#running","text":"Once Rummage is installed, you can run it from the command line (assuming your Python scripts/bin folder is in your system path): rummage If you have multiple Python versions installed, you can call Rummage for that specific Python version by appending the major and minor Python version to the end: rummage3.6 In some environments, it may make sense to run Rummage with pythonw which is mainly for launching GUI scripts ( pythonw is not available on Linux). In some environments, it may be required (see Running in Anaconda ). pythonw -m rummage","title":"Running"},{"location":"usage/#searching--replacing","text":"Search and replaces are configured in the Search tab. The search tab can essentially be broken up into two sections: text search configuration and file search configuration.","title":"Searching &amp; Replacing"},{"location":"usage/#configuring-text-search","text":"The first part of the Search tab contains mostly text search inputs, with the exception of the very first control, which is used to configure where to search. The second text box is used to specify what we are searching for in the content of each file. The last text box specified what we want to replace the found text with. Each text box retains a limited history of recent inputs that can be accessed via the drop down control to the right. The replace text box is only needed if you are performing a replace. The search input can also be omitted, and if so, Rummage will simply return files that match the provided file patterns (covered in Configuring File Search ). Below the text boxes is a collapsible panel that contains the text search options. The options consist of various checkboxes and controls that enable/disable search and replace features. The available features will vary depending on which regular expression engine you are using. Each feature is documented in Search Options . Lastly, Rummage provides buttons to launch a regular expression tester , dialogs to save or load frequently used regular expressions, and a dialog to create and manage regular expression chains .","title":"Configuring Text Search"},{"location":"usage/#configuring-file-search","text":"The bottom part of the search tab focuses on controlling which files get searched. Various checkboxes and inputs are available that can narrow the actual files that get searched. You can filter out hidden files, symlinks, files of specific sizes, or creation/modification dates. You can also restrict which files get searched by providing wild card patterns (or regular expression if preferred). By default, the patterns are applied to the base file or folder name. See File Patterns to learn more about accepted wild card pattern syntax and how to configure optional file pattern features. Hidden Files Rummage assumes dot files as hidden on all systems. Additionally, on Windows and macOS, it will also look at a file's filesystem attributes to determine if the system is potentially hiding the file as well. New 4.4.0 Added symlink following via the Follow symlinks toggle.","title":"Configuring File Search"},{"location":"usage/#results","text":"Once a search or replace is initiated, the results will begin to appear in the Files and Content tabs. You can then double click a file to open it in your editor, or right click them to bring up a context menu with additional options. Column Options You can hide/show columns by right clicking the list header to get a special context menu. You can then deselect or select the the column(s) you wish to hide/show respectively. You can also reorder the columns if desired.","title":"Results"},{"location":"usage/#regular-expression-tester","text":"Rummage comes with a simple regular expression tester. It has a simple text box to place content to search, and another text box that will show the final results after the find and replace is applied. Below those text boxes, there are two text input boxes for the find and replace patterns. Lastly, all search and replace flag options are found under the pattern input boxes. To use the tester, simply enter the content to search, set your desired options, and input your find and replace pattern. As you change your pattern or options, matches will be updated and highlighted, and the result box will be updated with any replacements. When you are satisfied with your result, click the Use button, and your pattern and settings will be populated in the main window.","title":"Regular Expression Tester"},{"location":"usage/#saving-and-loading-regular-expressions","text":"Regular expressions can be very complex, and sometimes you might want to save them for future use. When you have a pattern configured that you want to save, simply click the Save Search button and a dialog will pop up asking you to name the search. When done, click the Save button on the dialog and your search patterns and options will be saved. You'll notice that there are two input boxes. The first requires a unique name (only word characters, underscores, and hyphens are allowed). The second is an optional comment in case you wish to elaborate on what the pattern is for. Underneath the inputs will be the actual search settings being saved. To load a pattern that was saved previously, click the Load Search button. You will be presented with a dialog showing all your saved searches. Highlight the pattern you want to load and click the Load button. Your pattern and options will be populated in the main dialog. If you wish to edit the name or comment of a search, you can double click the entry or click the \"Edit\" button.","title":"Saving and Loading Regular Expressions"},{"location":"usage/#search-chains","text":"There are times you may have a task that requires you to do multiple find and replaces that are all related, but are too difficult to represent as a single find and replace. This is where search chains can be helpful. Search chains are essentially a sequence of multiple saved search and replace patterns . You can create a search chain by clicking the Search Chains button which will bring up the search chain manager. Here you can create or delete search chains. To use search chains, you must put Rummage in \"search chain\" mode by selecting the check box named Use search chains in the main window. When \"search chain\" mode is enabled, all controls that don't apply to search chains will be disabled, and the search box will be replaced with a drop down for selecting existing chains you've already created. When a search is performed, Rummage will iterate over each file with all the saved searches in the chain.","title":"Search Chains"},{"location":"usage/#replace-plugins","text":"Regular expressions are great, but sometimes regular expressions aren't enough. If you are dealing with a replace task that requires logic that cannot be represented in a simple replace pattern, you can create a \"replace plugin\". Replace plugins are written in Python and are loaded by first selecting the Use replace plugin check box in the main dialog. Then the main dialog's Replace with text box will become the Replace plugin text box with an associated file picker. Here you can point to your replace plugin file. Replace plugins aren't meant to be full, complex modules that import lots of other relative files. They are meant to be a single, compact script, but inside that script, you can import anything that is already installed in your Python environment.","title":"Replace plugins"},{"location":"usage/#writing-a-plugin","text":"Replace plugins should contain two things: A plugin class derived from the rummage.lib.rumcore.ReplacePlugin class. A function called get_replace that returns your class. The plugin class is fairly straight forward and is shown below. class ReplacePlugin ( object ): \"\"\"Rummage replace plugin.\"\"\" def __init__ ( self , file_info , flags ): \"\"\"Initialize.\"\"\" self . file_info = file_info self . flags = flags self . on_init () def on_init ( self ): \"\"\"Override this function to add initialization setup.\"\"\" def get_flags ( self ): \"\"\"Get flags.\"\"\" return self . flags def get_file_name ( self ): \"\"\"Get file name.\"\"\" return self . file_info . name def is_binary ( self ): \"\"\"Is a binary search.\"\"\" return self . file_info . encoding . encode == 'bin' def is_literal ( self ): \"\"\"Is a literal search.\"\"\" return self . flags & LITERAL def replace ( self , m ): \"\"\"Make replacement.\"\"\" return m . group ( 0 ) ReplacePlugin 's replace function will receive the parameter m which is either a regex or re match object (depending on what regular expression engine is selected). The return value must be either a Unicode string or byte string (for binary files). The ReplacePlugin 's file_info property is a named tuple providing information about the current file such as name, size, creation date, etc. class FileInfoRecord ( namedtuple ( 'FileInfoRecord' , [ 'id' , 'name' , 'size' , 'modified' , 'created' , 'encoding' ])): \"\"\"A record for tracking file info.\"\"\" The ReplacePlugin 's flags property contains only Rummage search related flags (the flags are abstracted at this level and are converted to the appropriate regular expression flags later). They can also be accessed from rummage.lib.rumcore . The flags are shown below. # Common regular expression flags (re|regex) IGNORECASE = 0x1 # (?i) DOTALL = 0x2 # (?s) MULTILINE = 0x4 # (?m) UNICODE = 0x8 # (?u) # Regex module flags ASCII = 0x10 # (?a) FULLCASE = 0x20 # (?f) WORD = 0x40 # (?w) BESTMATCH = 0x80 # (?b) ENHANCEMATCH = 0x100 # (?e) REVERSE = 0x200 # (?r) VERSION0 = 0x400 # (?V0) VERSION1 = 0x800 # (?V1) FORMATREPLACE = 0x1000 # Use {1} for groups in replace POSIX = 0x2000 # (?p) # Rumcore search related flags LITERAL = 0x10000 # Literal search Example Plugin In the example below, we have a replace plugin that replaces the search result with the name of the file. It is assumed this is not a binary replace, so a Unicode string is returned. from __future__ import unicode_literals from rummage.lib import rumcore import os class TestReplace ( rumcore . ReplacePlugin ): \"\"\"Replace object.\"\"\" def replace ( self , m ): \"\"\"Replace method.\"\"\" name = os . path . basename ( self . get_file_name ()) return name def get_replace (): \"\"\"Get the replace object.\"\"\" return TestReplace","title":"Writing a Plugin"},{"location":"usage/#export-to-csv-or-html","text":"Rummage allows the exporting of the results to either CSV or HTML. Simply select File\u2192Export and pick either CSV or HTML . The HTML output will be styled similar to the GUI interface with the results in tables with sortable columns. Large Result Sets Really, really large sets of results will probably be best suited for CSV as a browser may have a hard time loading the entire data set at once.","title":"Export to CSV or HTML"},{"location":"about/changelog/","text":"Changelog 4.15 NEW : Formally support Python 3.9. NEW : Formally drop Python 3.5. NEW : Use Apple's Big Sur template for the macOS dock icon. 4.14.1 FIX : Our old method of raising macOS windows no longer works. Raise via an osascript call. FIX : Fix internal flag mask issue that would prevent preference for - to negatively filter files from working. 4.14 NEW : Calculate better looking, alternating list colors instead of relying on wxPython to provide. NEW : Linux now uses the same autocomplete logic in autocomplete combo boxes that Windows and macOS uses. This removes a workaround that required Linux to use different logic. The actual issue has been resolved in wxPython 4.1. FIX : Notifications should work better on Windows. FIX : On some Linux systems, the down key, while one of the autocomplete combo boxes have focus, will cause the cursor to jump to a widget below the current and then process the on_key_up event which is meant to trigger the drop down history of the prior autocomplete combo box. FIX : Latest wxPython changes made escape not close the autocomplete combo boxes. FIX : Different Linux Desktop Environments need different size icons to show up properly in their taskbar, provide an icon bundle to ensure there is always one of appropriate size. FIX : Use wcmatch 7.0 which includes a few bug fixes. 4.13 NEW : Drop growl notification support. FIX : Replace macOS rocket dock icon and Window's default Python task bar icon with Rummage icon. FIX : On color change, macOS would reset time picker values. 4.12 NEW : Add new option to use ! instead of - for exclusion patterns. Rummage has always used - due to issues with distinguishing between exclusion patterns ( !exclude ) and extended globbing exclude patterns ( !(exclude_1| exclude 2) ). wcmatch 6.1 now resolves this by requiring ( to be escaped if the pattern starts with !( and it is not meant to be an extended glob pattern !(..) . NEW : Require wcmatch 6.1 that comes with a number of enhancements and bug fixes. NEW : Proper support for system color changes. Allows proper transitioning on macOS between light and dark mode. FIX : Minor fixes to selection colors in regex tester. FIX : Remove old macOS workaround to force focus on search input. FIX : Officially support Python 3.8. 4.11.1 FIX : Internal color fixes. FIX : Fix Rummage crashing with wxPython 4.1.X due to image sizing bug on macOS. FIX : Resolve issue where changelog would not show after an update. 4.11 NEW : wcmatch the file search library that Rummage uses, is now at version 6 which imposes a pattern limit to protect against patterns such as {1..1000000} which would expand to a large amount of patterns if brace expansion is enabled. Rummage exposes control of this. FIX : By using wcmatch version 6, complex issues involving pattern splitting with | and {,} are resolved. FIX : Fix logo not loading in about dialog. 4.10 NEW : Pattern save dialog now uses a drop down list so you can easily update an existing saved pattern. FIX : Fix issue with web view rendering and pymdown-extensions . 4.9 NEW : Require wcmatch 5.1.0+, bracex 1.4.0, and backrefs 1.3.0 to include latest bug fixes. 4.8 NEW : Supports installing extras via pip install rummage[extras] . FIX : Fix for notification sound display in settings dialog. FIX : Fix notification sound not playing on Linux when configured. 4.7.1 FIX : Require wcmatch 5.0 and make adjustments to support it. 4.7 Warning Backrefs 4.2.0 has deprecated the shorthand references for alphabetic character groups in re search patterns: \\l , \\L , \\c , and \\C . Instead you should use: [[:lower:]] , [[:^lower:]] , [[:upper:]] , and [[:^upper:]] respectively. While the references have only been deprecated, and are technically still available, a future version of Backrefs will remove them entirely at some point. It is recommended to transition now so as not to be caught unawares. NEW : Add col0 variable for editor configuration to allow for using a zero based column value instead of one based column value for editors that require it. NEW : Add global option to turn off alternating row colors in lists. NEW : Provide support for different players on Linux: paplay , aplay , and play ( sox ). Supported sound formats vary. NEW : Provide interface for selecting custom notification sounds. NEW : Require wcmatch 4.3.1+ and backrefs 4.2.0+. FIX : Better attempt to get appropriate file creation time on all Linux systems. FIX : Better fix for time picker getting wrong background. FIX : Ensure column sizing includes header size. FIX : When showing timed status event for results in status bar (full path name), decrease length of time that the temporary status is shown and clear temporary status when the cursor leaves result items. FIX : Don't log handled notification errors when a notification system is not found as these are handled gracefully and there is no need to worry the user. 4.6.3 FIX : Notification audio failures should be handled gracefully. FIX : Sometimes abort doesn't work. 4.6.2 FIX : Fix issue where time control used a completely different font and font size. 4.6.1 FIX : Fix issues with time control not properly inheriting system colors. FIX : Fix time control sizing on Linux. FIX : Fix time control issue on Linux and macOS that prevents decrement button from decrementing past initial value. 4.6 NEW : Search options and file limit options can be collapsed in the main dialog. This allows hiding these options if you aren't frequently using them, and provides a more compact dialog. NEW : There is no longer an option to hide the file limit options as now you can just collapse them. NEW : Added context menu option to allow reordering of columns in the result lists. Positions are remembered across sessions. FIX : Fix an issue on Linux where tabbing past a hidden directory button would cause an error in GTK. Ensure such controls do not allow focus when they are hidden. FIX : Fix an internal error where the autocomplete box could throw an error due to the index bounds not being checked. FIX : When list controls are smaller than the window, don't resize last column too an excessively big width. FIX : Fix regression with loading replace plugins. FIX : Better initial focus in autocomplete text boxes on platforms that had issues. FIX : Fix some localization issues. 4.5 NEW : Add Match base search option. Match base affects full path patterns when Full path directory match or Full path file match is enabled. When a full path pattern has no slashes, it will cause the pattern to only match the base file name. This allows you to have traditional base match patterns and more specific full path patterns usage simultaneously. Requires wcmatch 4.0 which is now the minimum requirement. FIX : Ensure settings version is upgraded properly. 4.4.1 FIX : Increase performance by reducing number of stat / lstat calls during crawls. 4.4 NEW : Add the ability to follow symlinks via a new symlink toggle in the limit panel (disabled by default). 4.3.4 FIX : Fix some glob related issues by upgrading to the minimum version of wcmatch version 2.1.0. FIX : Require the minimum version of bracex version 1.1.1. 4.3.3 FIX : Fix incompatibilities with latest Regex versions. 4.3.2 FIX : Require Backrefs 4.0.1 which includes a number of bug fixes, particularly one that sometimes caused Backrefs not to install properly. 4.3.1 FIX : Python file encoding detection should default to the Python 3 assumed default, not Python 2. FIX : Consolidate internal HTML logic and avoid using base 64 encoded images if using latest Markdown extensions that include path conversion fix. FIX : Refresh status less to improve on overall speed. FIX : Simplify status: no need to display ACITVE or DONE as button will change back to Search to signify completion along with the display of the Benchmark or even the notification if enabled. FIX : Ensure single file search with no pattern works like multi-file search with no pattern (just return file). FIX : Minor cleanup and performance increase in core. FIX : When search error dialog is shown from the status bar, fix error with window destruction. 4.3 NEW : Documents are now included locally in installation and can be viewed directly in Rummage via a webview dialog. NEW : License can now be viewed from the application menu. NEW : Show changelog on next launch after upgrade. NEW : Render editor instructions as HTML in the settings dialog. NEW : Simplify regular expression engine selection settings panel. FIX : New about dialog that no longer breaks on Linux. 4.2.4 FIX : Adjustments to work with wcmatch version 2.0.0. 4.2.3 FIX : Process preview in regular expression test dialog when replace pattern is empty. If replace plugin is enabled, we must have a plugin specified. 4.2.2 FIX : Don't open another update notification if one is already open. 4.2.1 FIX : Better default input focus on Linux when selecting the search tab. FIX : Properly select \"Search for\" as the default when chains mode is enabled. 4.2 NEW : File time result format has been updated for better readability. NEW : International file time result format for modified and created times has been added and can be enabled in the global preferences. NEW : Add ability to hide result columns. FIX : Use wxPython API to highlight alternate rows in lists in order to properly highlight rows on systems with dark themes etc. 4.1.3 FIX : Officially support Python 3.7. 4.1.2 FIX : Require wcmatch 1.0.1 which fixes a number of bugs, most notably a fix for POSIX character classes not properly being handled when at the start of sequence followed by range syntax ( [[:ascii:]-z] ) which will now be handled properly. FIX : When full path is enabled, and no file pattern is specified, all files will properly be matched like they are when full path is not enabled. 4.1.1 FIX : Fix regression where raw character translations ( \\xXX etc.) are no longer working. FIX : Style tweaks to HTML output. 4.1 NEW : Escape key will terminate a search or replace from any main tab. NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Use new wcmatch library to handle wild card file matching. Includes new features. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but let user choose by sending in (?a) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl. 4.0.7 FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization. 4.0.6 FIX : Fixes to Windows notifications. 4.0.5 FIX : Single instance handling regression #217 . 4.0.4 FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} . 4.0.3 FIX : Regression that causes crash when using reverse flag with Regex and Backrefs. 4.0.2 FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Require Backrefs 3.3.0. 4.0.1 FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects. 4.0 NEW : Drop Python 2.7 support. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs). 3.7.1 FIX : Don't feed Regex version flags into Re patterns. FIX : Style tweaks to HTML output. 3.7 NEW : Escape key will terminate a search or replace from any main tab. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs). NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but use the default for the Python version. Let user choose by sending in (?a) or (?u) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl. FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization. FIX : Fixes to Windows notifications. FIX : Single instance handling regression #217 . FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} . FIX : Regression that causes crash when using reverse flag with Regex and Backrefs. FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects. 3.6 NEW : Rummage will use cchardet by default if found. NEW : Expose way to specify cchardet being used. NEW : Expose special file type encoding handling, and allow user to modify extension list. Covers: bin , python , html , and xml . NEW : Detect middle endian 32 bit BOMs (even if Python has no encoder to actually handle them so we'll just default to binary). NEW : Speed up and tweak binary detection. NEW : Add copy button to support info dialog and ensure support info is read only. NEW : Don't copy notification icons to user folder for use, but use the packaged icons directly from library. NEW : Provide better support for localization. Build current language translation on install and bundle in library directly. FIX : Wildcard pattern splitting on | inside a sequence. FIX : Wildcard patterns not allowing character tokens such as \\x70 , \\u0070 , \\N{unicode name} , \\160 , and standard escapes like \\t etc. FIX : Incorrect documentation on wildcard patterns. FIX : Python 2.7 not translating Unicode escapes #196 . FIX : Require Backrefs 3.1.2. Some bug fixes, but notably, Backrefs switched from using \\< and \\> for start and end word boundaries to \\m and \\M . This is because of an oversight as Python versions less than 3.7 would escape < and > in re.escpae (even though it is unnecessary). Also some Unicode table generation fixes. FIX : Crashes in Python 2.7 related to not handling 32 bit Unicode in the GUI properly on narrow systems. FIX : Python 2.7 will translate 32 bit characters to escaped surrogate pairs on narrow systems. FIX : Tester will replace 32 bit Unicode characters with escaped surrogate pairs place holder in results. FIX : Rework highlighting in tester dialog to properly highlight 32 bit characters. FIX : Single instance regression. 3.5 NEW : Add context menu to content tab just like file tab with all the same entries. NEW : Add copy commands to context menus to copy selected file names, paths, or content of match (content tab only). NEW : Add \"delete\" and \"send to trash\" options to context menu. NEW : Add checksum/hash options to context menu. NEW : Add feature to check for updates. Also add auto update check (disabled by default). NEW : Install command line as tool as rummage and rummageX.X where X.X is the major and minor version of the Python in use. FIX : Fix some leaky objects. Ensure all items are destroyed. FIX : Rework main application object to fix related issues. FIX : Limit bulk file open to 20 items to prevent issues when open massive amount of files at once. FIX : Regression with exports due to recent column addition and order change. FIX : Search error list destroying parent/main dialog when closed. Also ensure destruction of error list dialog on main window closing. FIX : Python 2.7 not processing Unicode escapes in search patterns. 3.4.3 FIX : Import of bregex when regex is not installed. FIX : Backwards search did not reassemble text proper. 3.4.2 FIX : Require Backrefs 3.0.2 which fixes a minor Bregex cache purge issue. 3.4.1 FIX : Regression where installed CLI command would fail on launch. 3.4 NEW : Require latest Backrefs 3.0.1. NEW : Add extension column in results. NEW : Status now just shows [ACTIVE] or [DONE] instead of a misleading percentage. NEW : Can now multi-select and mass open files in your editor. NEW : Better error feedback in regex tester. NEW : Remove current directory from Python path when opening Rummage to prevent it from importing local libraries when launched inside a Python project. This mainly affects python -m rummage and pythonw -m rummage launching. FIX : Result item hover not showing file name in status bar. FIX : Warnings in plugin system. 3.3 NEW : Add changelog link in menu for quick reference. NEW : Encoding list is generated from the Python installation being used. FIX : Infinite loop on result double click in content list. 3.2.1 FIX : Complete message should not be of \"error\" type. 3.2.0 NEW : Results update live. Progress has been removed. ( #140 ) FIX : Windows status bar flicker. FIX : Results not showing when notifications is set to only play audio alerts. 3.1 NEW : Add export/import of settings and/or regular expression rules and chains. NEW : Add support info dialog to gather info when filing issues. 3.0 NEW : Allow Backrefs' replace references to work with format replaces. NEW : Add support for format replace with Re (with Backrefs only). NEW : Rummage requires Backrefs 2.1.0+. FIX : Regex's format replacement (without Backrefs) and Re (without Backrefs) handling of back slashes Unicode, byte, notation was different that Backrefs and other Regex modes. Normalize the differences to give the expected feel. FIX : Ensure replace (in all cases) isn't populated during a search only. 2.3.3 FIX : Avoid Backrefs 1.1.0 and 2+ for until 2.1. 2.3.2 FIX : Fix Windows pythonw failure. 2.3.1 FIX : wxPython 4.0.0b1 removed label parameter from constructor. FIX : Debug Unicode issue. 2.3 NEW : Add reveal right click menu option in \"File\" tab results. NEW : Expose backup configuration and allow putting all backups in a folder if desired. FIX : Windows Unicode input path issues from command line and through the pipe during single instance argument transfer. FIX : Windows Unicode issue when calling a shell command to open file in editor. 2.2 NEW : Redesign of the preferences dialog. NEW : Editor configurations are now sent through the shell which changes and simplifies the interface to set it up. FIX : Simplify dialog initial resize. FIX : Clean up of closing events: ensure we return a code, destroy objects, and skip unnecessary actions. FIX : Use double buffering on certain windows and panels in Windows to reduce text flickering on resize. FIX : Window is only resized by force on initial load, and if the dialog is ever too small when showing something that was hidden. FIX : Revert ensuring window is never bigger than usable size for now. 2.1 NEW : Add new chained search feature. NEW : Add new replace plugin support. NEW : Restructure internal API to support chained search. NEW : Saved searches will now require a unique name and an optional comment. Old legacy saves will be converted on first access. The old legacy name will be the comment, and a unique name will be generated from the comment. NEW : Saved search names and comments can be edited from the \"Load Search\" panel. NEW : Internal API no longer will guess and decode strings, only files. It is expected that the caller handles encoding of string buffers. A Unicode buffer will be searched as usual, and a binary string buffer will be treated as binary. NEW : Tester dialog will now process literal searches as well. NEW : Literal searches will now utilize the Unicode related flags. This is particularly notable if using the Regex module and wanting to have full case-folding applied in case-insensitive matches. FIX : Visual inconsistencies in regard to text box size relative to siblings, alignment of labels, etc. FIX : Content text box in tester dialog will now allow entering tab characters on all platforms instead of navigating to next control. FIX : Fix wxPython deprecation noise in the console. FIX : Fix some binary related replace issues. FIX : Fix search not aborting. FIX : Fix issue where selecting file from drop down list didn't hide limit panel. FIX : Don't display replace message when aborting replace. FIX : Fix limit panel hide logic so it doesn't show a the hidden panel on search. FIX : POSIX flag not generating refresh in tester dialog. FIX : Unicode issue in preferences' editor dialog. FIX : Ensure all localized strings properly get loaded. FIX : Ensure initial on_loaded event via CallLater works properly in Python 2 and 3. FIX : Call initial main window resize in on_loaded event in some situations. FIX : Ensure main window initial resize is never bigger than usable screen size. 2.0.5 FIX : Issue where mousing over results showed nothing in status bar. FIX : Issue where double clicking result in Content pattern would not open in editor. 2.0.4 FIX : Bump rev. 2.0.3 FIX : Fix editor argument dialog. 2.0.2 FIX : Revert changes in 2.0.1 as wheels don't run setup and don't properly create the Python specific commands. 2.0.1 FIX : Release binary in path as rummage and rummage<version> . So for 2.7, it would be rummage2.7 . 2.0 NEW : Python 3 support via the new wxPython 4.0.0 Phoenix! NEW : Dropped classic wxPython (<4.0.0) as it is too much work to maintain legacy support as well. NEW : Serialize piped argument data. FIX : Icon now displays in Ubuntu. FIX : Fix tab traversal issues in both macOS and Linux. FIX : Fix Linux progress bar disappearing. FIX : Fix notifications with terminal-notifier. FIX : Fix issues related to localization. 1.0.2 FIX : issue where editor could not be set. 1.0.1 FIX : Fixed issue where literal replace was not actually literal replace. 1.0 NEW : Initial release","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#415","text":"NEW : Formally support Python 3.9. NEW : Formally drop Python 3.5. NEW : Use Apple's Big Sur template for the macOS dock icon.","title":"4.15"},{"location":"about/changelog/#4141","text":"FIX : Our old method of raising macOS windows no longer works. Raise via an osascript call. FIX : Fix internal flag mask issue that would prevent preference for - to negatively filter files from working.","title":"4.14.1"},{"location":"about/changelog/#414","text":"NEW : Calculate better looking, alternating list colors instead of relying on wxPython to provide. NEW : Linux now uses the same autocomplete logic in autocomplete combo boxes that Windows and macOS uses. This removes a workaround that required Linux to use different logic. The actual issue has been resolved in wxPython 4.1. FIX : Notifications should work better on Windows. FIX : On some Linux systems, the down key, while one of the autocomplete combo boxes have focus, will cause the cursor to jump to a widget below the current and then process the on_key_up event which is meant to trigger the drop down history of the prior autocomplete combo box. FIX : Latest wxPython changes made escape not close the autocomplete combo boxes. FIX : Different Linux Desktop Environments need different size icons to show up properly in their taskbar, provide an icon bundle to ensure there is always one of appropriate size. FIX : Use wcmatch 7.0 which includes a few bug fixes.","title":"4.14"},{"location":"about/changelog/#413","text":"NEW : Drop growl notification support. FIX : Replace macOS rocket dock icon and Window's default Python task bar icon with Rummage icon. FIX : On color change, macOS would reset time picker values.","title":"4.13"},{"location":"about/changelog/#412","text":"NEW : Add new option to use ! instead of - for exclusion patterns. Rummage has always used - due to issues with distinguishing between exclusion patterns ( !exclude ) and extended globbing exclude patterns ( !(exclude_1| exclude 2) ). wcmatch 6.1 now resolves this by requiring ( to be escaped if the pattern starts with !( and it is not meant to be an extended glob pattern !(..) . NEW : Require wcmatch 6.1 that comes with a number of enhancements and bug fixes. NEW : Proper support for system color changes. Allows proper transitioning on macOS between light and dark mode. FIX : Minor fixes to selection colors in regex tester. FIX : Remove old macOS workaround to force focus on search input. FIX : Officially support Python 3.8.","title":"4.12"},{"location":"about/changelog/#4111","text":"FIX : Internal color fixes. FIX : Fix Rummage crashing with wxPython 4.1.X due to image sizing bug on macOS. FIX : Resolve issue where changelog would not show after an update.","title":"4.11.1"},{"location":"about/changelog/#411","text":"NEW : wcmatch the file search library that Rummage uses, is now at version 6 which imposes a pattern limit to protect against patterns such as {1..1000000} which would expand to a large amount of patterns if brace expansion is enabled. Rummage exposes control of this. FIX : By using wcmatch version 6, complex issues involving pattern splitting with | and {,} are resolved. FIX : Fix logo not loading in about dialog.","title":"4.11"},{"location":"about/changelog/#410","text":"NEW : Pattern save dialog now uses a drop down list so you can easily update an existing saved pattern. FIX : Fix issue with web view rendering and pymdown-extensions .","title":"4.10"},{"location":"about/changelog/#49","text":"NEW : Require wcmatch 5.1.0+, bracex 1.4.0, and backrefs 1.3.0 to include latest bug fixes.","title":"4.9"},{"location":"about/changelog/#48","text":"NEW : Supports installing extras via pip install rummage[extras] . FIX : Fix for notification sound display in settings dialog. FIX : Fix notification sound not playing on Linux when configured.","title":"4.8"},{"location":"about/changelog/#471","text":"FIX : Require wcmatch 5.0 and make adjustments to support it.","title":"4.7.1"},{"location":"about/changelog/#47","text":"Warning Backrefs 4.2.0 has deprecated the shorthand references for alphabetic character groups in re search patterns: \\l , \\L , \\c , and \\C . Instead you should use: [[:lower:]] , [[:^lower:]] , [[:upper:]] , and [[:^upper:]] respectively. While the references have only been deprecated, and are technically still available, a future version of Backrefs will remove them entirely at some point. It is recommended to transition now so as not to be caught unawares. NEW : Add col0 variable for editor configuration to allow for using a zero based column value instead of one based column value for editors that require it. NEW : Add global option to turn off alternating row colors in lists. NEW : Provide support for different players on Linux: paplay , aplay , and play ( sox ). Supported sound formats vary. NEW : Provide interface for selecting custom notification sounds. NEW : Require wcmatch 4.3.1+ and backrefs 4.2.0+. FIX : Better attempt to get appropriate file creation time on all Linux systems. FIX : Better fix for time picker getting wrong background. FIX : Ensure column sizing includes header size. FIX : When showing timed status event for results in status bar (full path name), decrease length of time that the temporary status is shown and clear temporary status when the cursor leaves result items. FIX : Don't log handled notification errors when a notification system is not found as these are handled gracefully and there is no need to worry the user.","title":"4.7"},{"location":"about/changelog/#463","text":"FIX : Notification audio failures should be handled gracefully. FIX : Sometimes abort doesn't work.","title":"4.6.3"},{"location":"about/changelog/#462","text":"FIX : Fix issue where time control used a completely different font and font size.","title":"4.6.2"},{"location":"about/changelog/#461","text":"FIX : Fix issues with time control not properly inheriting system colors. FIX : Fix time control sizing on Linux. FIX : Fix time control issue on Linux and macOS that prevents decrement button from decrementing past initial value.","title":"4.6.1"},{"location":"about/changelog/#46","text":"NEW : Search options and file limit options can be collapsed in the main dialog. This allows hiding these options if you aren't frequently using them, and provides a more compact dialog. NEW : There is no longer an option to hide the file limit options as now you can just collapse them. NEW : Added context menu option to allow reordering of columns in the result lists. Positions are remembered across sessions. FIX : Fix an issue on Linux where tabbing past a hidden directory button would cause an error in GTK. Ensure such controls do not allow focus when they are hidden. FIX : Fix an internal error where the autocomplete box could throw an error due to the index bounds not being checked. FIX : When list controls are smaller than the window, don't resize last column too an excessively big width. FIX : Fix regression with loading replace plugins. FIX : Better initial focus in autocomplete text boxes on platforms that had issues. FIX : Fix some localization issues.","title":"4.6"},{"location":"about/changelog/#45","text":"NEW : Add Match base search option. Match base affects full path patterns when Full path directory match or Full path file match is enabled. When a full path pattern has no slashes, it will cause the pattern to only match the base file name. This allows you to have traditional base match patterns and more specific full path patterns usage simultaneously. Requires wcmatch 4.0 which is now the minimum requirement. FIX : Ensure settings version is upgraded properly.","title":"4.5"},{"location":"about/changelog/#441","text":"FIX : Increase performance by reducing number of stat / lstat calls during crawls.","title":"4.4.1"},{"location":"about/changelog/#44","text":"NEW : Add the ability to follow symlinks via a new symlink toggle in the limit panel (disabled by default).","title":"4.4"},{"location":"about/changelog/#434","text":"FIX : Fix some glob related issues by upgrading to the minimum version of wcmatch version 2.1.0. FIX : Require the minimum version of bracex version 1.1.1.","title":"4.3.4"},{"location":"about/changelog/#433","text":"FIX : Fix incompatibilities with latest Regex versions.","title":"4.3.3"},{"location":"about/changelog/#432","text":"FIX : Require Backrefs 4.0.1 which includes a number of bug fixes, particularly one that sometimes caused Backrefs not to install properly.","title":"4.3.2"},{"location":"about/changelog/#431","text":"FIX : Python file encoding detection should default to the Python 3 assumed default, not Python 2. FIX : Consolidate internal HTML logic and avoid using base 64 encoded images if using latest Markdown extensions that include path conversion fix. FIX : Refresh status less to improve on overall speed. FIX : Simplify status: no need to display ACITVE or DONE as button will change back to Search to signify completion along with the display of the Benchmark or even the notification if enabled. FIX : Ensure single file search with no pattern works like multi-file search with no pattern (just return file). FIX : Minor cleanup and performance increase in core. FIX : When search error dialog is shown from the status bar, fix error with window destruction.","title":"4.3.1"},{"location":"about/changelog/#43","text":"NEW : Documents are now included locally in installation and can be viewed directly in Rummage via a webview dialog. NEW : License can now be viewed from the application menu. NEW : Show changelog on next launch after upgrade. NEW : Render editor instructions as HTML in the settings dialog. NEW : Simplify regular expression engine selection settings panel. FIX : New about dialog that no longer breaks on Linux.","title":"4.3"},{"location":"about/changelog/#424","text":"FIX : Adjustments to work with wcmatch version 2.0.0.","title":"4.2.4"},{"location":"about/changelog/#423","text":"FIX : Process preview in regular expression test dialog when replace pattern is empty. If replace plugin is enabled, we must have a plugin specified.","title":"4.2.3"},{"location":"about/changelog/#422","text":"FIX : Don't open another update notification if one is already open.","title":"4.2.2"},{"location":"about/changelog/#421","text":"FIX : Better default input focus on Linux when selecting the search tab. FIX : Properly select \"Search for\" as the default when chains mode is enabled.","title":"4.2.1"},{"location":"about/changelog/#42","text":"NEW : File time result format has been updated for better readability. NEW : International file time result format for modified and created times has been added and can be enabled in the global preferences. NEW : Add ability to hide result columns. FIX : Use wxPython API to highlight alternate rows in lists in order to properly highlight rows on systems with dark themes etc.","title":"4.2"},{"location":"about/changelog/#413_1","text":"FIX : Officially support Python 3.7.","title":"4.1.3"},{"location":"about/changelog/#412_1","text":"FIX : Require wcmatch 1.0.1 which fixes a number of bugs, most notably a fix for POSIX character classes not properly being handled when at the start of sequence followed by range syntax ( [[:ascii:]-z] ) which will now be handled properly. FIX : When full path is enabled, and no file pattern is specified, all files will properly be matched like they are when full path is not enabled.","title":"4.1.2"},{"location":"about/changelog/#411_1","text":"FIX : Fix regression where raw character translations ( \\xXX etc.) are no longer working. FIX : Style tweaks to HTML output.","title":"4.1.1"},{"location":"about/changelog/#41","text":"NEW : Escape key will terminate a search or replace from any main tab. NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Use new wcmatch library to handle wild card file matching. Includes new features. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but let user choose by sending in (?a) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl.","title":"4.1"},{"location":"about/changelog/#407","text":"FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization.","title":"4.0.7"},{"location":"about/changelog/#406","text":"FIX : Fixes to Windows notifications.","title":"4.0.6"},{"location":"about/changelog/#405","text":"FIX : Single instance handling regression #217 .","title":"4.0.5"},{"location":"about/changelog/#404","text":"FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} .","title":"4.0.4"},{"location":"about/changelog/#403","text":"FIX : Regression that causes crash when using reverse flag with Regex and Backrefs.","title":"4.0.3"},{"location":"about/changelog/#402","text":"FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Require Backrefs 3.3.0.","title":"4.0.2"},{"location":"about/changelog/#401","text":"FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects.","title":"4.0.1"},{"location":"about/changelog/#40","text":"NEW : Drop Python 2.7 support. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs).","title":"4.0"},{"location":"about/changelog/#371","text":"FIX : Don't feed Regex version flags into Re patterns. FIX : Style tweaks to HTML output.","title":"3.7.1"},{"location":"about/changelog/#37","text":"NEW : Escape key will terminate a search or replace from any main tab. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs). NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but use the default for the Python version. Let user choose by sending in (?a) or (?u) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl. FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization. FIX : Fixes to Windows notifications. FIX : Single instance handling regression #217 . FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} . FIX : Regression that causes crash when using reverse flag with Regex and Backrefs. FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects.","title":"3.7"},{"location":"about/changelog/#36","text":"NEW : Rummage will use cchardet by default if found. NEW : Expose way to specify cchardet being used. NEW : Expose special file type encoding handling, and allow user to modify extension list. Covers: bin , python , html , and xml . NEW : Detect middle endian 32 bit BOMs (even if Python has no encoder to actually handle them so we'll just default to binary). NEW : Speed up and tweak binary detection. NEW : Add copy button to support info dialog and ensure support info is read only. NEW : Don't copy notification icons to user folder for use, but use the packaged icons directly from library. NEW : Provide better support for localization. Build current language translation on install and bundle in library directly. FIX : Wildcard pattern splitting on | inside a sequence. FIX : Wildcard patterns not allowing character tokens such as \\x70 , \\u0070 , \\N{unicode name} , \\160 , and standard escapes like \\t etc. FIX : Incorrect documentation on wildcard patterns. FIX : Python 2.7 not translating Unicode escapes #196 . FIX : Require Backrefs 3.1.2. Some bug fixes, but notably, Backrefs switched from using \\< and \\> for start and end word boundaries to \\m and \\M . This is because of an oversight as Python versions less than 3.7 would escape < and > in re.escpae (even though it is unnecessary). Also some Unicode table generation fixes. FIX : Crashes in Python 2.7 related to not handling 32 bit Unicode in the GUI properly on narrow systems. FIX : Python 2.7 will translate 32 bit characters to escaped surrogate pairs on narrow systems. FIX : Tester will replace 32 bit Unicode characters with escaped surrogate pairs place holder in results. FIX : Rework highlighting in tester dialog to properly highlight 32 bit characters. FIX : Single instance regression.","title":"3.6"},{"location":"about/changelog/#35","text":"NEW : Add context menu to content tab just like file tab with all the same entries. NEW : Add copy commands to context menus to copy selected file names, paths, or content of match (content tab only). NEW : Add \"delete\" and \"send to trash\" options to context menu. NEW : Add checksum/hash options to context menu. NEW : Add feature to check for updates. Also add auto update check (disabled by default). NEW : Install command line as tool as rummage and rummageX.X where X.X is the major and minor version of the Python in use. FIX : Fix some leaky objects. Ensure all items are destroyed. FIX : Rework main application object to fix related issues. FIX : Limit bulk file open to 20 items to prevent issues when open massive amount of files at once. FIX : Regression with exports due to recent column addition and order change. FIX : Search error list destroying parent/main dialog when closed. Also ensure destruction of error list dialog on main window closing. FIX : Python 2.7 not processing Unicode escapes in search patterns.","title":"3.5"},{"location":"about/changelog/#343","text":"FIX : Import of bregex when regex is not installed. FIX : Backwards search did not reassemble text proper.","title":"3.4.3"},{"location":"about/changelog/#342","text":"FIX : Require Backrefs 3.0.2 which fixes a minor Bregex cache purge issue.","title":"3.4.2"},{"location":"about/changelog/#341","text":"FIX : Regression where installed CLI command would fail on launch.","title":"3.4.1"},{"location":"about/changelog/#34","text":"NEW : Require latest Backrefs 3.0.1. NEW : Add extension column in results. NEW : Status now just shows [ACTIVE] or [DONE] instead of a misleading percentage. NEW : Can now multi-select and mass open files in your editor. NEW : Better error feedback in regex tester. NEW : Remove current directory from Python path when opening Rummage to prevent it from importing local libraries when launched inside a Python project. This mainly affects python -m rummage and pythonw -m rummage launching. FIX : Result item hover not showing file name in status bar. FIX : Warnings in plugin system.","title":"3.4"},{"location":"about/changelog/#33","text":"NEW : Add changelog link in menu for quick reference. NEW : Encoding list is generated from the Python installation being used. FIX : Infinite loop on result double click in content list.","title":"3.3"},{"location":"about/changelog/#321","text":"FIX : Complete message should not be of \"error\" type.","title":"3.2.1"},{"location":"about/changelog/#320","text":"NEW : Results update live. Progress has been removed. ( #140 ) FIX : Windows status bar flicker. FIX : Results not showing when notifications is set to only play audio alerts.","title":"3.2.0"},{"location":"about/changelog/#31","text":"NEW : Add export/import of settings and/or regular expression rules and chains. NEW : Add support info dialog to gather info when filing issues.","title":"3.1"},{"location":"about/changelog/#30","text":"NEW : Allow Backrefs' replace references to work with format replaces. NEW : Add support for format replace with Re (with Backrefs only). NEW : Rummage requires Backrefs 2.1.0+. FIX : Regex's format replacement (without Backrefs) and Re (without Backrefs) handling of back slashes Unicode, byte, notation was different that Backrefs and other Regex modes. Normalize the differences to give the expected feel. FIX : Ensure replace (in all cases) isn't populated during a search only.","title":"3.0"},{"location":"about/changelog/#233","text":"FIX : Avoid Backrefs 1.1.0 and 2+ for until 2.1.","title":"2.3.3"},{"location":"about/changelog/#232","text":"FIX : Fix Windows pythonw failure.","title":"2.3.2"},{"location":"about/changelog/#231","text":"FIX : wxPython 4.0.0b1 removed label parameter from constructor. FIX : Debug Unicode issue.","title":"2.3.1"},{"location":"about/changelog/#23","text":"NEW : Add reveal right click menu option in \"File\" tab results. NEW : Expose backup configuration and allow putting all backups in a folder if desired. FIX : Windows Unicode input path issues from command line and through the pipe during single instance argument transfer. FIX : Windows Unicode issue when calling a shell command to open file in editor.","title":"2.3"},{"location":"about/changelog/#22","text":"NEW : Redesign of the preferences dialog. NEW : Editor configurations are now sent through the shell which changes and simplifies the interface to set it up. FIX : Simplify dialog initial resize. FIX : Clean up of closing events: ensure we return a code, destroy objects, and skip unnecessary actions. FIX : Use double buffering on certain windows and panels in Windows to reduce text flickering on resize. FIX : Window is only resized by force on initial load, and if the dialog is ever too small when showing something that was hidden. FIX : Revert ensuring window is never bigger than usable size for now.","title":"2.2"},{"location":"about/changelog/#21","text":"NEW : Add new chained search feature. NEW : Add new replace plugin support. NEW : Restructure internal API to support chained search. NEW : Saved searches will now require a unique name and an optional comment. Old legacy saves will be converted on first access. The old legacy name will be the comment, and a unique name will be generated from the comment. NEW : Saved search names and comments can be edited from the \"Load Search\" panel. NEW : Internal API no longer will guess and decode strings, only files. It is expected that the caller handles encoding of string buffers. A Unicode buffer will be searched as usual, and a binary string buffer will be treated as binary. NEW : Tester dialog will now process literal searches as well. NEW : Literal searches will now utilize the Unicode related flags. This is particularly notable if using the Regex module and wanting to have full case-folding applied in case-insensitive matches. FIX : Visual inconsistencies in regard to text box size relative to siblings, alignment of labels, etc. FIX : Content text box in tester dialog will now allow entering tab characters on all platforms instead of navigating to next control. FIX : Fix wxPython deprecation noise in the console. FIX : Fix some binary related replace issues. FIX : Fix search not aborting. FIX : Fix issue where selecting file from drop down list didn't hide limit panel. FIX : Don't display replace message when aborting replace. FIX : Fix limit panel hide logic so it doesn't show a the hidden panel on search. FIX : POSIX flag not generating refresh in tester dialog. FIX : Unicode issue in preferences' editor dialog. FIX : Ensure all localized strings properly get loaded. FIX : Ensure initial on_loaded event via CallLater works properly in Python 2 and 3. FIX : Call initial main window resize in on_loaded event in some situations. FIX : Ensure main window initial resize is never bigger than usable screen size.","title":"2.1"},{"location":"about/changelog/#205","text":"FIX : Issue where mousing over results showed nothing in status bar. FIX : Issue where double clicking result in Content pattern would not open in editor.","title":"2.0.5"},{"location":"about/changelog/#204","text":"FIX : Bump rev.","title":"2.0.4"},{"location":"about/changelog/#203","text":"FIX : Fix editor argument dialog.","title":"2.0.3"},{"location":"about/changelog/#202","text":"FIX : Revert changes in 2.0.1 as wheels don't run setup and don't properly create the Python specific commands.","title":"2.0.2"},{"location":"about/changelog/#201","text":"FIX : Release binary in path as rummage and rummage<version> . So for 2.7, it would be rummage2.7 .","title":"2.0.1"},{"location":"about/changelog/#20","text":"NEW : Python 3 support via the new wxPython 4.0.0 Phoenix! NEW : Dropped classic wxPython (<4.0.0) as it is too much work to maintain legacy support as well. NEW : Serialize piped argument data. FIX : Icon now displays in Ubuntu. FIX : Fix tab traversal issues in both macOS and Linux. FIX : Fix Linux progress bar disappearing. FIX : Fix notifications with terminal-notifier. FIX : Fix issues related to localization.","title":"2.0"},{"location":"about/changelog/#102","text":"FIX : issue where editor could not be set.","title":"1.0.2"},{"location":"about/changelog/#101","text":"FIX : Fixed issue where literal replace was not actually literal replace.","title":"1.0.1"},{"location":"about/changelog/#10","text":"NEW : Initial release","title":"1.0"},{"location":"about/contributing/","text":"Contributing & Support Overview Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. GitHub Sponsors If you'd like to do a one time contribution, you can do so via PayPal. PayPal Bug Reports Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weaknesses in the algorithm. Pull Requests Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. You should also add tests for bugs you are fixing. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. GUI Tools The GUI is designed with the tool wxFormBuilder . Usually the latest version is used unless there are some problematic issues. Simply open the gui.fbp file with wxFormBuilder . The gear icon in the toolbar will generate the Python code. Current version being used is 3.9.0 . Currently tools/gui_patch.py should be run on the output before running Rummage. Running Validation Tests Make sure that Tox is installed: pip install tox Run Tox: tox Tox should install necessary dependencies and run the tests. If you are a Linux user, please check out information on requirements . Documentation Improvements A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. To build the documentation, you will need the necessary requirements. You can get them by running pip install -r requirements/docs.txt . We currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these packages via the requirements file. The command for previewing the docs is mkdocs serve . It should be run from the root directory. You can then view the documents at localhost:8000 . When providing documentation updates, please generate Rummage's internal documentation via python tools/gen_docs.py . Pull requests will currently fail if the documentation is not updated along with the requested changes.","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#overview","text":"Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. GitHub Sponsors If you'd like to do a one time contribution, you can do so via PayPal. PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weaknesses in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. You should also add tests for bugs you are fixing. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"about/contributing/#gui-tools","text":"The GUI is designed with the tool wxFormBuilder . Usually the latest version is used unless there are some problematic issues. Simply open the gui.fbp file with wxFormBuilder . The gear icon in the toolbar will generate the Python code. Current version being used is 3.9.0 . Currently tools/gui_patch.py should be run on the output before running Rummage.","title":"GUI Tools"},{"location":"about/contributing/#running-validation-tests","text":"Make sure that Tox is installed: pip install tox Run Tox: tox Tox should install necessary dependencies and run the tests. If you are a Linux user, please check out information on requirements .","title":"Running Validation Tests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. To build the documentation, you will need the necessary requirements. You can get them by running pip install -r requirements/docs.txt . We currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these packages via the requirements file. The command for previewing the docs is mkdocs serve . It should be run from the root directory. You can then view the documents at localhost:8000 . When providing documentation updates, please generate Rummage's internal documentation via python tools/gen_docs.py . Pull requests will currently fail if the documentation is not updated along with the requested changes.","title":"Documentation Improvements"},{"location":"about/license/","text":"License MIT license. Copyright \u00a9 2013 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Internal documentation includes use of Font Awesome 4.7 by Dave Gandy . Only a subset of the icons are actually distributed with Rummage. The subset of icons was generated by using Fontello . The Font Awesome font is licensed under the SIL OFL 1.1","title":"License"},{"location":"about/license/#license","text":"MIT license. Copyright \u00a9 2013 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Internal documentation includes use of Font Awesome 4.7 by Dave Gandy . Only a subset of the icons are actually distributed with Rummage. The subset of icons was generated by using Fontello . The Font Awesome font is licensed under the SIL OFL 1.1","title":"License"}]}