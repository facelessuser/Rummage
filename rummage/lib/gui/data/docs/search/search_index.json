{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Rummage \ue157 Overview \ue157 Rummage is a cross platform search and replace tool. Rummage crawls directories and searches for specified patterns (either regular expression or literal) and can optionally replace those targets with desired text. Rummage is written in Python and is currently available on Python 3.4+ (some older releases are available for Python 2.7). Rummage by default uses Python's Re regular expression engine, but you can also use the fantastic, feature rich Regex search engine and do interesting things like fuzzy searching and more.","title":"Rummage"},{"location":"index.html#rummage","text":"","title":"Rummage"},{"location":"index.html#overview","text":"Rummage is a cross platform search and replace tool. Rummage crawls directories and searches for specified patterns (either regular expression or literal) and can optionally replace those targets with desired text. Rummage is written in Python and is currently available on Python 3.4+ (some older releases are available for Python 2.7). Rummage by default uses Python's Re regular expression engine, but you can also use the fantastic, feature rich Regex search engine and do interesting things like fuzzy searching and more.","title":"Overview"},{"location":"changelog.html","text":"Changelog \ue157 4.3.0 \ue157 NEW : Documents are now included locally in installation and can be viewed directly in Rummage via a webview dialog. NEW : License can now be viewed from the application menu. NEW : Show changelog on next launch after upgrade. NEW : Render editor instructions as HTML in the settings dialog. NEW : Simplify regular expression engine selection settings panel. 4.2.4 \ue157 FIX : Adjustments to work with wcmatch version 2.0.0. 4.2.3 \ue157 FIX : Process preview in regular expression test dialog when replace pattern is empty. If replace plugin is enabled, we must have a plugin specified. 4.2.2 \ue157 FIX : Don't open another update notification if one is already open. 4.2.1 \ue157 FIX : Better default input focus on Linux when selecting the search tab. FIX : Properly select \"Search for\" as the default when chains mode is enabled. 4.2.0 \ue157 NEW : File time result format has been updated for better readability. NEW : International file time result format for modified and created times has been added and can be enabled in the global preferences. NEW : Add ability to hide result columns. FIX : Use wxPython API to highlight alternate rows in lists in order to properly highlight rows on systems with dark themes etc. 4.1.3 \ue157 FIX : Officially support Python 3.7. 4.1.2 \ue157 FIX : Require wcmatch 1.0.1 which fixes a number of bugs, most notably a fix for POSIX character classes not properly being handled when at the start of sequence followed by range syntax ( [[:ascii:]-z] ) which will now be handled properly. FIX : When full path is enabled, and no file pattern is specified, all files will properly be matched like they are when full path is not enabled. 4.1.1 \ue157 FIX : Fix regression where raw character translations ( \\xXX etc.) are no longer working. FIX : Style tweaks to HTML output. 4.1.0 \ue157 NEW : Escape key will terminate a search or replace from any main tab. NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Use new wcmatch library to handle wild card file matching. Includes new features. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but let user choose by sending in (?a) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl. 4.0.7 \ue157 FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization. 4.0.6 \ue157 FIX : Fixes to Windows notifications. 4.0.5 \ue157 FIX : Single instance handling regression #217 . 4.0.4 \ue157 FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} . 4.0.3 \ue157 FIX : Regression that causes crash when using reverse flag with Regex and Backrefs. 4.0.2 \ue157 FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Require Backrefs 3.3.0. 4.0.1 \ue157 FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects. 4.0.0 \ue157 NEW : Drop Python 2.7 support. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs). 3.7.1 \ue157 FIX : Don't feed Regex version flags into Re patterns. FIX : Style tweaks to HTML output. 3.7.0 \ue157 NEW : Escape key will terminate a search or replace from any main tab. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs). NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but use the default for the Python version. Let user choose by sending in (?a) or (?u) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl. FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization. FIX : Fixes to Windows notifications. FIX : Single instance handling regression #217 . FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} . FIX : Regression that causes crash when using reverse flag with Regex and Backrefs. FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects. 3.6.0 \ue157 NEW : Rummage will use cchardet by default if found. NEW : Expose way to specify cchardet being used. NEW : Expose special file type encoding handling, and allow user to modify extension list. Covers: bin , python , html , and xml . NEW : Detect middle endian 32 bit BOMs (even if Python has no encoder to actually handle them so we'll just default to binary). NEW : Speed up and tweak binary detection. NEW : Add copy button to support info dialog and ensure support info is read only. NEW : Don't copy notification icons to user folder for use, but use the packaged icons directly from library. NEW : Provide better support for localization. Build current language translation on install and bundle in library directly. FIX : Wildcard pattern splitting on | inside a sequence. FIX : Wildcard patterns not allowing character tokens such as \\x70 , \\u0070 , \\N{unicode name} , \\160 , and standard escapes like \\t etc. FIX : Incorrect documentation on wildcard patterns. FIX : Python 2.7 not translating Unicode escapes #196 . FIX : Require Backrefs 3.1.2. Some bug fixes, but notably, Backrefs switched from using \\< and \\> for start and end word boundaries to \\m and \\M . This is because of an oversight as Python versions less than 3.7 would escape < and > in re.escpae (even though it is unnecessary). Also some Unicode table generation fixes. FIX : Crashes in Python 2.7 related to not handling 32 bit Unicode in the GUI properly on narrow systems. FIX : Python 2.7 will translate 32 bit characters to escaped surrogate pairs on narrow systems. FIX : Tester will replace 32 bit Unicode characters with escaped surrogate pairs place holder in results. FIX : Rework highlighting in tester dialog to properly highlight 32 bit characters. FIX : Single instance regression. 3.5.0 \ue157 NEW : Add context menu to content tab just like file tab with all the same entries. NEW : Add copy commands to context menus to copy selected file names, paths, or content of match (content tab only). NEW : Add \"delete\" and \"send to trash\" options to context menu. NEW : Add checksum/hash options to context menu. NEW : Add feature to check for updates. Also add auto update check (disabled by default). NEW : Install command line as tool as rummage and rummageX.X where X.X is the major and minor version of the Python in use. FIX : Fix some leaky objects. Ensure all items are destroyed. FIX : Rework main application object to fix related issues. FIX : Limit bulk file open to 20 items to prevent issues when open massive amount of files at once. FIX : Regression with exports due to recent column addition and order change. FIX : Search error list destroying parent/main dialog when closed. Also ensure destruction of error list dialog on main window closing. FIX : Python 2.7 not processing Unicode escapes in search patterns. 3.4.3 \ue157 FIX : Import of bregex when regex is not installed. FIX : Backwards search did not reassemble text proper. 3.4.2 \ue157 FIX : Require Backrefs 3.0.2 which fixes a minor Bregex cache purge issue. 3.4.1 \ue157 FIX : Regression where installed CLI command would fail on launch. 3.4.0 \ue157 NEW : Require latest Backrefs 3.0.1. NEW : Add extension column in results. NEW : Status now just shows [ACTIVE] or [DONE] instead of a misleading percentage. NEW : Can now multi-select and mass open files in your editor. NEW : Better error feedback in regex tester. NEW : Remove current directory from Python path when opening Rummage to prevent it from importing local libraries when launched inside a Python project. This mainly affects python -m rummage and pythonw -m rummage launching. FIX : Result item hover not showing file name in status bar. FIX : Warnings in plugin system. 3.3.0 \ue157 NEW : Add changelog link in menu for quick reference. NEW : Encoding list is generated from the Python installation being used. FIX : Infinite loop on result double click in content list. 3.2.1 \ue157 FIX : Complete message should not be of \"error\" type. 3.2.0 \ue157 NEW : Results update live. Progress has been removed. ( #140 ) FIX : Windows status bar flicker. FIX : Results not showing when notifications is set to only play audio alerts. 3.1.0 \ue157 NEW : Add export/import of settings and/or regular expression rules and chains. NEW : Add support info dialog to gather info when filing issues. 3.0.0 \ue157 NEW : Allow Backrefs' replace references to work with format replaces. NEW : Add support for format replace with Re (with Backrefs only). NEW : Rummage requires Backrefs 2.1.0+. FIX : Regex's format replacement (without Backrefs) and Re (without Backrefs) handling of back slashes Unicode, byte, notation was different that Backrefs and other Regex modes. Normalize the differences to give the expected feel. FIX : Ensure replace (in all cases) isn't populated during a search only. 2.3.3 \ue157 FIX : Avoid Backrefs 1.1.0 and 2+ for until 2.1. 2.3.2 \ue157 FIX : Fix Windows pythonw failure. 2.3.1 \ue157 FIX : wxPython 4.0.0b1 removed label parameter from constructor. FIX : Debug Unicode issue. 2.3.0 \ue157 NEW : Add reveal right click menu option in \"File\" tab results. NEW : Expose backup configuration and allow putting all backups in a folder if desired. FIX : Windows Unicode input path issues from command line and through the pipe during single instance argument transfer. FIX : Windows Unicode issue when calling a shell command to open file in editor. 2.2.0 \ue157 NEW : Redesign of the preferences dialog. NEW : Editor configurations are now sent through the shell which changes and simplifies the interface to set it up. FIX : Simplify dialog initial resize. FIX : Clean up of closing events: ensure we return a code, destroy objects, and skip unnecessary actions. FIX : Use double buffering on certain windows and panels in Windows to reduce text flickering on resize. FIX : Window is only resized by force on initial load, and if the dialog is ever too small when showing something that was hidden. FIX : Revert ensuring window is never bigger than usable size for now. 2.1.0 \ue157 NEW : Add new chained search feature. NEW : Add new replace plugin support. NEW : Restructure internal API to support chained search. NEW : Saved searches will now require a unique name and an optional comment. Old legacy saves will be converted on first access. The old legacy name will be the comment, and a unique name will be generated from the comment. NEW : Saved search names and comments can be edited from the \"Load Search\" panel. NEW : Internal API no longer will guess and decode strings, only files. It is expected that the caller handles encoding of string buffers. A Unicode buffer will be searched as usual, and a binary string buffer will be treated as binary. NEW : Tester dialog will now process literal searches as well. NEW : Literal searches will now utilize the Unicode related flags. This is particularly notable if using the Regex module and wanting to have full case-folding applied in case-insensitive matches. FIX : Visual inconsistencies in regard to text box size relative to siblings, alignment of labels, etc. FIX : Content text box in tester dialog will now allow entering tab characters on all platforms instead of navigating to next control. FIX : Fix wxPython deprecation noise in the console. FIX : Fix some binary related replace issues. FIX : Fix search not aborting. FIX : Fix issue where selecting file from drop down list didn't hide limit panel. FIX : Don't display replace message when aborting replace. FIX : Fix limit panel hide logic so it doesn't show a the hidden panel on search. FIX : POSIX flag not generating refresh in tester dialog. FIX : Unicode issue in preferences' editor dialog. FIX : Ensure all localized strings properly get loaded. FIX : Ensure initial on_loaded event via CallLater works properly in Python 2 and 3. FIX : Call initial main window resize in on_loaded event in some situations. FIX : Ensure main window initial resize is never bigger than usable screen size. 2.0.5 \ue157 FIX : Issue where mousing over results showed nothing in status bar. FIX : Issue where double clicking result in Content pattern would not open in editor. 2.0.4 \ue157 FIX : Bump rev. 2.0.3 \ue157 FIX : Fix editor argument dialog. 2.0.2 \ue157 FIX : Revert changes in 2.0.1 as wheels don't run setup and don't properly create the Python specific commands. 2.0.1 \ue157 FIX : Release binary in path as rummage and rummage<version> . So for 2.7, it would be rummage2.7 . 2.0.0 \ue157 NEW : Python 3 support via the new wxPython 4.0.0 Phoenix! NEW : Dropped classic wxPython (<4.0.0) as it is too much work to maintain legacy support as well. NEW : Serialize piped argument data. FIX : Icon now displays in Ubuntu. FIX : Fix tab traversal issues in both macOS and Linux. FIX : Fix Linux progress bar disappearing. FIX : Fix notifications with terminal-notifier. FIX : Fix issues related to localization. 1.0.2 \ue157 FIX : issue where editor could not be set. 1.0.1 \ue157 FIX : Fixed issue where literal replace was not actually literal replace. 1.0.0 \ue157 NEW : Initial release","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#430","text":"NEW : Documents are now included locally in installation and can be viewed directly in Rummage via a webview dialog. NEW : License can now be viewed from the application menu. NEW : Show changelog on next launch after upgrade. NEW : Render editor instructions as HTML in the settings dialog. NEW : Simplify regular expression engine selection settings panel.","title":"4.3.0"},{"location":"changelog.html#424","text":"FIX : Adjustments to work with wcmatch version 2.0.0.","title":"4.2.4"},{"location":"changelog.html#423","text":"FIX : Process preview in regular expression test dialog when replace pattern is empty. If replace plugin is enabled, we must have a plugin specified.","title":"4.2.3"},{"location":"changelog.html#422","text":"FIX : Don't open another update notification if one is already open.","title":"4.2.2"},{"location":"changelog.html#421","text":"FIX : Better default input focus on Linux when selecting the search tab. FIX : Properly select \"Search for\" as the default when chains mode is enabled.","title":"4.2.1"},{"location":"changelog.html#420","text":"NEW : File time result format has been updated for better readability. NEW : International file time result format for modified and created times has been added and can be enabled in the global preferences. NEW : Add ability to hide result columns. FIX : Use wxPython API to highlight alternate rows in lists in order to properly highlight rows on systems with dark themes etc.","title":"4.2.0"},{"location":"changelog.html#413","text":"FIX : Officially support Python 3.7.","title":"4.1.3"},{"location":"changelog.html#412","text":"FIX : Require wcmatch 1.0.1 which fixes a number of bugs, most notably a fix for POSIX character classes not properly being handled when at the start of sequence followed by range syntax ( [[:ascii:]-z] ) which will now be handled properly. FIX : When full path is enabled, and no file pattern is specified, all files will properly be matched like they are when full path is not enabled.","title":"4.1.2"},{"location":"changelog.html#411","text":"FIX : Fix regression where raw character translations ( \\xXX etc.) are no longer working. FIX : Style tweaks to HTML output.","title":"4.1.1"},{"location":"changelog.html#410","text":"NEW : Escape key will terminate a search or replace from any main tab. NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Use new wcmatch library to handle wild card file matching. Includes new features. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but let user choose by sending in (?a) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl.","title":"4.1.0"},{"location":"changelog.html#407","text":"FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization.","title":"4.0.7"},{"location":"changelog.html#406","text":"FIX : Fixes to Windows notifications.","title":"4.0.6"},{"location":"changelog.html#405","text":"FIX : Single instance handling regression #217 .","title":"4.0.5"},{"location":"changelog.html#404","text":"FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} .","title":"4.0.4"},{"location":"changelog.html#403","text":"FIX : Regression that causes crash when using reverse flag with Regex and Backrefs.","title":"4.0.3"},{"location":"changelog.html#402","text":"FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Require Backrefs 3.3.0.","title":"4.0.2"},{"location":"changelog.html#401","text":"FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects.","title":"4.0.1"},{"location":"changelog.html#400","text":"NEW : Drop Python 2.7 support. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs).","title":"4.0.0"},{"location":"changelog.html#371","text":"FIX : Don't feed Regex version flags into Re patterns. FIX : Style tweaks to HTML output.","title":"3.7.1"},{"location":"changelog.html#370","text":"NEW : Escape key will terminate a search or replace from any main tab. NEW : Lines are calculated incrementally as needed opposed to all up front. NEW : File pattern input will default to * or .* (for wildcard or regular expression respectively) if left empty. NEW : Wildcard patterns starting with - will now work as expected even if no other patterns are applied (works for both folder exclude and file pattern inputs). NEW : Old legacy editor configuration is now removed. Only the new is allowed. NEW : Show history in the settings dialog's history panel. NEW : Add notification test button in settings. NEW : Regular expression file patterns will respect the user's preference for the Regex libraries version choice. NEW : Don't force ASCII in regular expression file patterns, but use the default for the Python version. Let user choose by sending in (?a) or (?u) flag. FIX : History clearing did not clear replace plugin history. FIX : Growl notifications timing out due to image being to large. FIX : Notifications sound not working when just alert sounds are enabled or sound is enabled with Growl. FIX : Log error during update check. If not a silent check, alert user there was an update check issue. FIX : Update requests should use https . FIX : Update localization. FIX : Fixes to Windows notifications. FIX : Single instance handling regression #217 . FIX : Require Backrefs 3.5.0 which includes fixes for: pattern caching, named Unicode bug. Also adds better format string replace with the added ability to use format string align and fill. FIX : Don't escape curly brackets in format strings just because they are string escaped when preprocessing Regex replace templates without Backrefs. Require explicit {{ or }} . FIX : Regression that causes crash when using reverse flag with Regex and Backrefs. FIX : In test dialog, when an expression doesn't match, the result box is empty. FIX : Cleanup some object leaks. FIX : Incorrect sizing of chain dialog. FIX : All list objects should be finalized properly to allow sorting. FIX : Make encoding list style in settings dialog consistent with the look and feel of other list objects.","title":"3.7.0"},{"location":"changelog.html#360","text":"NEW : Rummage will use cchardet by default if found. NEW : Expose way to specify cchardet being used. NEW : Expose special file type encoding handling, and allow user to modify extension list. Covers: bin , python , html , and xml . NEW : Detect middle endian 32 bit BOMs (even if Python has no encoder to actually handle them so we'll just default to binary). NEW : Speed up and tweak binary detection. NEW : Add copy button to support info dialog and ensure support info is read only. NEW : Don't copy notification icons to user folder for use, but use the packaged icons directly from library. NEW : Provide better support for localization. Build current language translation on install and bundle in library directly. FIX : Wildcard pattern splitting on | inside a sequence. FIX : Wildcard patterns not allowing character tokens such as \\x70 , \\u0070 , \\N{unicode name} , \\160 , and standard escapes like \\t etc. FIX : Incorrect documentation on wildcard patterns. FIX : Python 2.7 not translating Unicode escapes #196 . FIX : Require Backrefs 3.1.2. Some bug fixes, but notably, Backrefs switched from using \\< and \\> for start and end word boundaries to \\m and \\M . This is because of an oversight as Python versions less than 3.7 would escape < and > in re.escpae (even though it is unnecessary). Also some Unicode table generation fixes. FIX : Crashes in Python 2.7 related to not handling 32 bit Unicode in the GUI properly on narrow systems. FIX : Python 2.7 will translate 32 bit characters to escaped surrogate pairs on narrow systems. FIX : Tester will replace 32 bit Unicode characters with escaped surrogate pairs place holder in results. FIX : Rework highlighting in tester dialog to properly highlight 32 bit characters. FIX : Single instance regression.","title":"3.6.0"},{"location":"changelog.html#350","text":"NEW : Add context menu to content tab just like file tab with all the same entries. NEW : Add copy commands to context menus to copy selected file names, paths, or content of match (content tab only). NEW : Add \"delete\" and \"send to trash\" options to context menu. NEW : Add checksum/hash options to context menu. NEW : Add feature to check for updates. Also add auto update check (disabled by default). NEW : Install command line as tool as rummage and rummageX.X where X.X is the major and minor version of the Python in use. FIX : Fix some leaky objects. Ensure all items are destroyed. FIX : Rework main application object to fix related issues. FIX : Limit bulk file open to 20 items to prevent issues when open massive amount of files at once. FIX : Regression with exports due to recent column addition and order change. FIX : Search error list destroying parent/main dialog when closed. Also ensure destruction of error list dialog on main window closing. FIX : Python 2.7 not processing Unicode escapes in search patterns.","title":"3.5.0"},{"location":"changelog.html#343","text":"FIX : Import of bregex when regex is not installed. FIX : Backwards search did not reassemble text proper.","title":"3.4.3"},{"location":"changelog.html#342","text":"FIX : Require Backrefs 3.0.2 which fixes a minor Bregex cache purge issue.","title":"3.4.2"},{"location":"changelog.html#341","text":"FIX : Regression where installed CLI command would fail on launch.","title":"3.4.1"},{"location":"changelog.html#340","text":"NEW : Require latest Backrefs 3.0.1. NEW : Add extension column in results. NEW : Status now just shows [ACTIVE] or [DONE] instead of a misleading percentage. NEW : Can now multi-select and mass open files in your editor. NEW : Better error feedback in regex tester. NEW : Remove current directory from Python path when opening Rummage to prevent it from importing local libraries when launched inside a Python project. This mainly affects python -m rummage and pythonw -m rummage launching. FIX : Result item hover not showing file name in status bar. FIX : Warnings in plugin system.","title":"3.4.0"},{"location":"changelog.html#330","text":"NEW : Add changelog link in menu for quick reference. NEW : Encoding list is generated from the Python installation being used. FIX : Infinite loop on result double click in content list.","title":"3.3.0"},{"location":"changelog.html#321","text":"FIX : Complete message should not be of \"error\" type.","title":"3.2.1"},{"location":"changelog.html#320","text":"NEW : Results update live. Progress has been removed. ( #140 ) FIX : Windows status bar flicker. FIX : Results not showing when notifications is set to only play audio alerts.","title":"3.2.0"},{"location":"changelog.html#310","text":"NEW : Add export/import of settings and/or regular expression rules and chains. NEW : Add support info dialog to gather info when filing issues.","title":"3.1.0"},{"location":"changelog.html#300","text":"NEW : Allow Backrefs' replace references to work with format replaces. NEW : Add support for format replace with Re (with Backrefs only). NEW : Rummage requires Backrefs 2.1.0+. FIX : Regex's format replacement (without Backrefs) and Re (without Backrefs) handling of back slashes Unicode, byte, notation was different that Backrefs and other Regex modes. Normalize the differences to give the expected feel. FIX : Ensure replace (in all cases) isn't populated during a search only.","title":"3.0.0"},{"location":"changelog.html#233","text":"FIX : Avoid Backrefs 1.1.0 and 2+ for until 2.1.","title":"2.3.3"},{"location":"changelog.html#232","text":"FIX : Fix Windows pythonw failure.","title":"2.3.2"},{"location":"changelog.html#231","text":"FIX : wxPython 4.0.0b1 removed label parameter from constructor. FIX : Debug Unicode issue.","title":"2.3.1"},{"location":"changelog.html#230","text":"NEW : Add reveal right click menu option in \"File\" tab results. NEW : Expose backup configuration and allow putting all backups in a folder if desired. FIX : Windows Unicode input path issues from command line and through the pipe during single instance argument transfer. FIX : Windows Unicode issue when calling a shell command to open file in editor.","title":"2.3.0"},{"location":"changelog.html#220","text":"NEW : Redesign of the preferences dialog. NEW : Editor configurations are now sent through the shell which changes and simplifies the interface to set it up. FIX : Simplify dialog initial resize. FIX : Clean up of closing events: ensure we return a code, destroy objects, and skip unnecessary actions. FIX : Use double buffering on certain windows and panels in Windows to reduce text flickering on resize. FIX : Window is only resized by force on initial load, and if the dialog is ever too small when showing something that was hidden. FIX : Revert ensuring window is never bigger than usable size for now.","title":"2.2.0"},{"location":"changelog.html#210","text":"NEW : Add new chained search feature. NEW : Add new replace plugin support. NEW : Restructure internal API to support chained search. NEW : Saved searches will now require a unique name and an optional comment. Old legacy saves will be converted on first access. The old legacy name will be the comment, and a unique name will be generated from the comment. NEW : Saved search names and comments can be edited from the \"Load Search\" panel. NEW : Internal API no longer will guess and decode strings, only files. It is expected that the caller handles encoding of string buffers. A Unicode buffer will be searched as usual, and a binary string buffer will be treated as binary. NEW : Tester dialog will now process literal searches as well. NEW : Literal searches will now utilize the Unicode related flags. This is particularly notable if using the Regex module and wanting to have full case-folding applied in case-insensitive matches. FIX : Visual inconsistencies in regard to text box size relative to siblings, alignment of labels, etc. FIX : Content text box in tester dialog will now allow entering tab characters on all platforms instead of navigating to next control. FIX : Fix wxPython deprecation noise in the console. FIX : Fix some binary related replace issues. FIX : Fix search not aborting. FIX : Fix issue where selecting file from drop down list didn't hide limit panel. FIX : Don't display replace message when aborting replace. FIX : Fix limit panel hide logic so it doesn't show a the hidden panel on search. FIX : POSIX flag not generating refresh in tester dialog. FIX : Unicode issue in preferences' editor dialog. FIX : Ensure all localized strings properly get loaded. FIX : Ensure initial on_loaded event via CallLater works properly in Python 2 and 3. FIX : Call initial main window resize in on_loaded event in some situations. FIX : Ensure main window initial resize is never bigger than usable screen size.","title":"2.1.0"},{"location":"changelog.html#205","text":"FIX : Issue where mousing over results showed nothing in status bar. FIX : Issue where double clicking result in Content pattern would not open in editor.","title":"2.0.5"},{"location":"changelog.html#204","text":"FIX : Bump rev.","title":"2.0.4"},{"location":"changelog.html#203","text":"FIX : Fix editor argument dialog.","title":"2.0.3"},{"location":"changelog.html#202","text":"FIX : Revert changes in 2.0.1 as wheels don't run setup and don't properly create the Python specific commands.","title":"2.0.2"},{"location":"changelog.html#201","text":"FIX : Release binary in path as rummage and rummage<version> . So for 2.7, it would be rummage2.7 .","title":"2.0.1"},{"location":"changelog.html#200","text":"NEW : Python 3 support via the new wxPython 4.0.0 Phoenix! NEW : Dropped classic wxPython (<4.0.0) as it is too much work to maintain legacy support as well. NEW : Serialize piped argument data. FIX : Icon now displays in Ubuntu. FIX : Fix tab traversal issues in both macOS and Linux. FIX : Fix Linux progress bar disappearing. FIX : Fix notifications with terminal-notifier. FIX : Fix issues related to localization.","title":"2.0.0"},{"location":"changelog.html#102","text":"FIX : issue where editor could not be set.","title":"1.0.2"},{"location":"changelog.html#101","text":"FIX : Fixed issue where literal replace was not actually literal replace.","title":"1.0.1"},{"location":"changelog.html#100","text":"NEW : Initial release","title":"1.0.0"},{"location":"contributing.html","text":"Contributing & Support \ue157 Overview \ue157 Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports \ue157 Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code \ue157 Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weaknesses in the algorithm. Pull Requests \ue157 Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. You should also add tests for bugs you are fixing. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. GUI Tools \ue157 The GUI is designed with the tool wxFormBuilder . Usually the latest version is used unless there are some problematic issues. Simply open the gui.fbp file with wxFormBuilder . The gear icon in the toolbar will generate the Python code. Current version being used is 3.8.1 . Running Validation Tests \ue157 Make sure that Tox is installed: pip install tox Run Tox: tox Tox should install necessary dependencies and run the tests. If you are a Linux user, please check out information on requirements . Documentation Improvements \ue157 A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. To build the documentation, you will need the necessary requirements. You can get them by running pip install -r requirements/docs.txt . I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these packages via teh requirements file. The command for previewing the docs is mkdocs serve . It should be run from the root directory. You can then view the documents at localhost:8000 . When providing documentation updates, please generate Rummage's internal documentation via python tools/gen_docs.py . Pull requests will currently fail if the documentation is not updated along with the requested changes.","title":"Contributing &amp; Support"},{"location":"contributing.html#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"contributing.html#overview","text":"Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"contributing.html#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"contributing.html#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weaknesses in the algorithm.","title":"Reviewing Code"},{"location":"contributing.html#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. You should also add tests for bugs you are fixing. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"contributing.html#gui-tools","text":"The GUI is designed with the tool wxFormBuilder . Usually the latest version is used unless there are some problematic issues. Simply open the gui.fbp file with wxFormBuilder . The gear icon in the toolbar will generate the Python code. Current version being used is 3.8.1 .","title":"GUI Tools"},{"location":"contributing.html#running-validation-tests","text":"Make sure that Tox is installed: pip install tox Run Tox: tox Tox should install necessary dependencies and run the tests. If you are a Linux user, please check out information on requirements .","title":"Running Validation Tests"},{"location":"contributing.html#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. To build the documentation, you will need the necessary requirements. You can get them by running pip install -r requirements/docs.txt . I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these packages via teh requirements file. The command for previewing the docs is mkdocs serve . It should be run from the root directory. You can then view the documents at localhost:8000 . When providing documentation updates, please generate Rummage's internal documentation via python tools/gen_docs.py . Pull requests will currently fail if the documentation is not updated along with the requested changes.","title":"Documentation Improvements"},{"location":"extras.html","text":"Extras \ue157 File Manager Context Menu \ue157 macOS \ue157 Open Automator. Create new Service. Set the following: Service receives selected files or folders in any Application . Shell: /bin/sh . Pass input: as arguments . Content of script: (/Library/Frameworks/Python.framework/Versions/3.6/bin/rummage --path \"$1\")>/dev/null 2>&1 & This is just an example. You will need to determine the location of your Python install. Save to /Users/<username>/Library/Services/Rummage Here... . Windows \ue157 Create a file rummage.reg with the content from one of the entries below. Replace <python_install_path> with the actual path to your Python directory (usually something like: c:\\Python35 ). Remember to escape backslashes appropriately. Also note that we quote %1 to allow spaces in the command line argument. Paths may vary, and it is left up to the user to discover where their Python install directory is. Warning This isn't a guide in how to do registry editing proper, so only edit the registry if you are certain of what you are doing. Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Optionally, you can also include the Rummage icon beside your context menu entry by adding a few additional lines: Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Save file. Double click the registry file to add the context menu into Windows Explorer. Linux \ue157 There are many different flavors of Linux using different file managers. This makes it difficult to give a guide to cover all cases. Please research about your specific distro's file manager and how to add context menus. If you would like to include the info here, please issue a pull request to update the documentation. Ubuntu Nautilus (Gnome) \ue157 Paths might vary depending on Ubuntu version etc. Create an executable file called Rummage Here... in ~/.local/share/nautilus/scripts/ with the following content (RUMMAGE_PATH should be the binary created when installing rummage in Python which is usually /usr/local/bin/rummage ). #!/usr/bin/python import os import subprocess RUMMAGE_PATH = \"/usr/local/bin/rummage\" selected_paths = os . environ . get ( \"NAUTILUS_SCRIPT_SELECTED_FILE_PATHS\" , None ) if selected_paths is not None : paths = selected_paths . split ( \" \\n \" ) if len ( paths ): subprocess . Popen ([ RUMMAGE_PATH , \"--path\" , paths [ 0 ]]) Restart of Nautilus may or may not be needed, but context menu item should appear under Scripts and should work on files and folders. Ubuntu Dolphin (KDE) \ue157 At the time of writing, this was tested on KDE 5, so most of the commands are appended with '5'. To discover where you can store your context menu entries, run the following command: facelessuser@facelessuser:~$ kf5-config --path services /home/facelessuser/.local/share/kservices5/:/usr/share/kservices5/ Next create your .desktop file in one of these locations creating the necessary folder(s) if needed. In this example, the file will be created at ~/.local/share/kservices5/ServiceMenus/rummage.desktoop . Provide the necessary configuration to specify the entry type, file targets, command to execute, icon, etc. In our case, we specify all/all to target both files and folders. We also point to one of the PNG files that ship in the package for the icon. [Desktop Entry] Type = Service X-KDE-ServiceTypes = KonqPopupMenu/Plugin MimeType = all/all; Actions = rummage [Desktop Action rummage] Name = Rummage Here... Icon = /usr/local/lib/python3.5/dist-packages/rummage/lib/gui/data/rummage_hires.png Exec = rummage --path \"%f\" Lastly we rebuild and refresh the desktop entries: facelessuser@facelessuser:~$ kbuildsycoca5 Close all Dolphin windows and reopen to see your context menu item. It should be found under Actions . Localization \ue157 Rummage provides an i18n localization framework to allow support for displaying the UI in other locales. Currently the project only has an incomplete Russian translation (I don't speak Russian, so I can't complete it). Translations should be compiled and included by default requiring no additional steps starting in version 3.6.0. I only speak English, so I do not maintain the translations. If the UI changes, someone from the community will need to update them appropriately via pull requests or they will remain out of date. Editing Existing Translations \ue157 Translations are stored at rummage/lib/gui/localization/locale/<LOCALE>/LC_MESSAGES/rummage.po . Just edit the rummage.po for the appropriate <LOCALE> . Inside each .po file there will be a msgid for each unique translatable string. Each msgid represents the actual US English text that is shown in Rummage. Underneath each msgid , you'll also find a msgstr which represents the translation for the msgid . Just edit the corresponding msgstr for each msgid in the existing rummage.po file. msgid \"About\" msgstr \"<my_translation>\" Generate New Template from Source \ue157 In the Python source, you'll notice that translatable strings are represented as _(\"some text\") . _ is the function that retrieves the proper translations. In order to provide translations, we have to build up a template of all of these strings in a .pot file. This is done by running: python setup.py extract_messages This will scan the Python source and generate a template at rummage/lib/gui/localization/locale/rummage.pot . If you update the source in a way that requires generating a new .pot file, then you will most likely need to update existing .po files as well. See Update Translation Files to see how. See Babel's documentation on extract_messages for more info. Update Translation Files \ue157 When new strings are added in the source, or strings are changed, you will need to re-generate the .pot file and then update the .po files. This should update all .po files. python setup.py update_catalog If you need to only update a specific .po file: python setup.py update_catalog -l en_US See Babel's documentation on update_catalog for more info. Create New Translations \ue157 To create a translation .po file to edit, all you need to do is run the command below specifying your locale. The command should create a .po file to edit and the associated directory structure. python setup.py init_catalog -l en_US See Babel's documentation on init_catalog for more info. Build Translations \ue157 Building translations is also pretty easy: python setup.py compile_catalog This should build .mo files for all languages. See Babel's documentation on compile_catalog for more info.","title":"Extras"},{"location":"extras.html#extras","text":"","title":"Extras"},{"location":"extras.html#file-manager-context-menu","text":"","title":"File Manager Context Menu"},{"location":"extras.html#macos","text":"Open Automator. Create new Service. Set the following: Service receives selected files or folders in any Application . Shell: /bin/sh . Pass input: as arguments . Content of script: (/Library/Frameworks/Python.framework/Versions/3.6/bin/rummage --path \"$1\")>/dev/null 2>&1 & This is just an example. You will need to determine the location of your Python install. Save to /Users/<username>/Library/Services/Rummage Here... .","title":"macOS"},{"location":"extras.html#windows","text":"Create a file rummage.reg with the content from one of the entries below. Replace <python_install_path> with the actual path to your Python directory (usually something like: c:\\Python35 ). Remember to escape backslashes appropriately. Also note that we quote %1 to allow spaces in the command line argument. Paths may vary, and it is left up to the user to discover where their Python install directory is. Warning This isn't a guide in how to do registry editing proper, so only edit the registry if you are certain of what you are doing. Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Optionally, you can also include the Rummage icon beside your context menu entry by adding a few additional lines: Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...] @ = \"\" \"Icon\" = \"<python_install_path>\\\\Lib\\\\site-packages\\\\rummage\\\\lib\\\\gui\\\\data\\\\rummage.ico\" [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command] @ = \"<python_install_path>\\\\Scripts\\\\rummage.exe --path \\\"%1\\\"\" Save file. Double click the registry file to add the context menu into Windows Explorer.","title":"Windows"},{"location":"extras.html#linux","text":"There are many different flavors of Linux using different file managers. This makes it difficult to give a guide to cover all cases. Please research about your specific distro's file manager and how to add context menus. If you would like to include the info here, please issue a pull request to update the documentation.","title":"Linux"},{"location":"extras.html#ubuntu-nautilus-gnome","text":"Paths might vary depending on Ubuntu version etc. Create an executable file called Rummage Here... in ~/.local/share/nautilus/scripts/ with the following content (RUMMAGE_PATH should be the binary created when installing rummage in Python which is usually /usr/local/bin/rummage ). #!/usr/bin/python import os import subprocess RUMMAGE_PATH = \"/usr/local/bin/rummage\" selected_paths = os . environ . get ( \"NAUTILUS_SCRIPT_SELECTED_FILE_PATHS\" , None ) if selected_paths is not None : paths = selected_paths . split ( \" \\n \" ) if len ( paths ): subprocess . Popen ([ RUMMAGE_PATH , \"--path\" , paths [ 0 ]]) Restart of Nautilus may or may not be needed, but context menu item should appear under Scripts and should work on files and folders.","title":"Ubuntu Nautilus (Gnome)"},{"location":"extras.html#ubuntu-dolphin-kde","text":"At the time of writing, this was tested on KDE 5, so most of the commands are appended with '5'. To discover where you can store your context menu entries, run the following command: facelessuser@facelessuser:~$ kf5-config --path services /home/facelessuser/.local/share/kservices5/:/usr/share/kservices5/ Next create your .desktop file in one of these locations creating the necessary folder(s) if needed. In this example, the file will be created at ~/.local/share/kservices5/ServiceMenus/rummage.desktoop . Provide the necessary configuration to specify the entry type, file targets, command to execute, icon, etc. In our case, we specify all/all to target both files and folders. We also point to one of the PNG files that ship in the package for the icon. [Desktop Entry] Type = Service X-KDE-ServiceTypes = KonqPopupMenu/Plugin MimeType = all/all; Actions = rummage [Desktop Action rummage] Name = Rummage Here... Icon = /usr/local/lib/python3.5/dist-packages/rummage/lib/gui/data/rummage_hires.png Exec = rummage --path \"%f\" Lastly we rebuild and refresh the desktop entries: facelessuser@facelessuser:~$ kbuildsycoca5 Close all Dolphin windows and reopen to see your context menu item. It should be found under Actions .","title":"Ubuntu Dolphin (KDE)"},{"location":"extras.html#localization","text":"Rummage provides an i18n localization framework to allow support for displaying the UI in other locales. Currently the project only has an incomplete Russian translation (I don't speak Russian, so I can't complete it). Translations should be compiled and included by default requiring no additional steps starting in version 3.6.0. I only speak English, so I do not maintain the translations. If the UI changes, someone from the community will need to update them appropriately via pull requests or they will remain out of date.","title":"Localization"},{"location":"extras.html#editing-existing-translations","text":"Translations are stored at rummage/lib/gui/localization/locale/<LOCALE>/LC_MESSAGES/rummage.po . Just edit the rummage.po for the appropriate <LOCALE> . Inside each .po file there will be a msgid for each unique translatable string. Each msgid represents the actual US English text that is shown in Rummage. Underneath each msgid , you'll also find a msgstr which represents the translation for the msgid . Just edit the corresponding msgstr for each msgid in the existing rummage.po file. msgid \"About\" msgstr \"<my_translation>\"","title":"Editing Existing Translations"},{"location":"extras.html#generate-new-template-from-source","text":"In the Python source, you'll notice that translatable strings are represented as _(\"some text\") . _ is the function that retrieves the proper translations. In order to provide translations, we have to build up a template of all of these strings in a .pot file. This is done by running: python setup.py extract_messages This will scan the Python source and generate a template at rummage/lib/gui/localization/locale/rummage.pot . If you update the source in a way that requires generating a new .pot file, then you will most likely need to update existing .po files as well. See Update Translation Files to see how. See Babel's documentation on extract_messages for more info.","title":"Generate New Template from Source"},{"location":"extras.html#update-translation-files","text":"When new strings are added in the source, or strings are changed, you will need to re-generate the .pot file and then update the .po files. This should update all .po files. python setup.py update_catalog If you need to only update a specific .po file: python setup.py update_catalog -l en_US See Babel's documentation on update_catalog for more info.","title":"Update Translation Files"},{"location":"extras.html#create-new-translations","text":"To create a translation .po file to edit, all you need to do is run the command below specifying your locale. The command should create a .po file to edit and the associated directory structure. python setup.py init_catalog -l en_US See Babel's documentation on init_catalog for more info.","title":"Create New Translations"},{"location":"extras.html#build-translations","text":"Building translations is also pretty easy: python setup.py compile_catalog This should build .mo files for all languages. See Babel's documentation on compile_catalog for more info.","title":"Build Translations"},{"location":"installation.html","text":"Installation \ue157 Requirements \ue157 Rummage has a few requirements when installing. These will all be taken care of when installing via pip . Name Details wxPython 4.0.1+ The new wxPython Phoenix 4.0.0 is required for the GUI. backrefs 3.5.0+ Used to extend the re or regex regular expression engine with additional back references. bracex Bash style brace expansion for file patterns. wcmatch File name matching library. chardet 3.0.4+ Used for file encoding guessing when an encoding is not specified. filelock Used for file locking to allow different instances of Rummage to access the same file. gntp Used to send notifications to Growl via the the Growl Notification Transport Protocol for all platforms (macOS, Windows, and Linux). send2trash Used for sending files to trash/recycle bin on each platform. pymdown-extensions An extension pack used in conjunction with Python Markdown to render some dynamic content into HTML that is embedded into the GUI. pygments Used to provide syntax highlighting in some of the dynamically generated HTML help. Some optional modules that can be manually installed. Name Details regex regex usage is completely optional, but it is included for those who wish to use it. Regex is a great regular expression engine that adds some nice features such as fuzzy searching, nested char sets, better Unicode support, and more. cchardet cchardet is high speed universal character encoding detector. Much faster than the default chardet . Linux Prerequisites \ue157 Rummage requires wxPython in order to run. If you have a recent Linux distro that has a pre-built, installable wxPython package for your version of Python, then it may make sense to just install the pre-built package via your Linux package manager ( apt-get for Ubuntu). The version must meet the version requirement above. If you have installed a version of Python on your machine that does not have a pre-built wxPython package, or if your distro simply doesn't have a pre-built package that satisfies the requirements, then it may make sense to either install via pip or to manually compile and install. In both of these cases, you will have to install the appropriate prerequisites for your Linux distro. Rummage is generally tested on Ubuntu, so instructions are generally most up to date for Ubuntu. Remember, wxPython is a separate project and our instructions may get out of sync, so please check wxPython's official documentation on prerequisites before installing. Particularly under this section . Due to recent changes in PyPI, it is probably best to ensure you have at least version 10.0 or greater of pip . Ubuntu provides a method for installing pip with sudo apt-get install python3-pip , but this usually installs an older version. It is recommended to install pip with the command shown below (where python3 is a call to the installed Python version of your choice): curl https://bootstrap.pypa.io/get-pip.py | sudo python3 Info The latest wxPython Phoenix builds with GTK3 by default, so the example below will install GTK3 related dependencies. You can use GTK2 if you build wxPython manually. Ubuntu sudo apt-get install python3.6-dev dpkg-dev build-essential libwebkitgtk-dev libjpeg-dev libtiff-dev libsdl1.2-dev libgstreamer-plugins-base1.0-dev libnotify-dev freeglut3 freeglut3-dev libgtk-3-dev libwebkitgtk-3.0-dev Replace python3.6-dev with the Python version you are using. Fedora 26 For Fedora 26, it has been reported that you need fewer dependencies to build wxPython; I have not personally confirmed this. sudo dnf install gcc-c++ wxGTK-devel gstreamer-devel webkitgtk-devel GConf2-devel gstreamer-plugins-base-devel If your Linux distribution has gstreamer 1.0 available (like the Fedora distro), you can install the dev packages for that instead of the 0.10 version. After getting all the correct prerequisites, you should be able to install Rummage with pip , though it is recommended to try and install wxPython first via pip install wxpython . If wxPython doesn't install properly, be sure to reference wxPython's documentation to see if there is something you are missing. Also, creating an issue over at wxPython's GitHub site for related wxPython install issues may get you help faster than creating them on the Rummage issue page, which is mainly meant for tracking Rummage specific issues, not wxPython install issues. Be patient while installing wxPython as Linux must build wxPython while macOS and Windows do not. If installing with pip , you may be waiting a long time with no real indication of how far along the process is. If pip doesn't work, you can look into building and installing manually. If you find any of this information incorrect, please feel free to offer a pull request. macOS Prerequisites \ue157 On macOS, Rummage uses either pure Python modules, or modules that provide wheels. What this means is that no C code compilation is required to install Rummage; therefore, no prior steps are needed. But if you want to install regex , there will be some C code compilation performed by pip which will require Xcode to be installed. Download Xcode from the Mac App Store. Navigate to Xcode > Preferences > Downloads tab. Click the button to install the Command Line Tools. Open Terminal (Applications/Terminal) and run xcode-select --install . You will be prompted to install the Xcode Command Line Tools. Installation \ue157 Here are a couple of ways to install and upgrade. Keep in mind if you are a Linux user, you have some prerequisites to install before proceeding. Install: pip install rummage Install with optional module. Upgrades of optional modules will have to be manually upgraded when needed as well as they are not tracked in Rummage's requirements. pip install rummage regex cchardet Upgrade: pip install --upgrade rummage Installing in Virtual Environments (macOS) \ue157 If installing in a virtual environment via virtualenv , you may run into the following error: This used to be a fairly annoying issue to workaround, but in wxPython 4+, it's not too bad. The wxPython wiki is a bit out of date. You don't have to symlink wx.pth or anything like that anymore as the design of wxPython is a bit different now. All you have to do is place the script below in my_virtual_env/bin . In this example I call it fwpy for \"framework python\" (make sure to adjust paths or Python versions to match your installation). #!/bin/bash # what real Python executable to use PYVER=2.7 PYTHON=/Library/Frameworks/Python.framework/Versions/$PYVER/bin/python$PYVER # find the root of the virtualenv, it should be the parent of the dir this script is in ENV=`$PYTHON -c \"import os; print os.path.abspath(os.path.join(os.path.dirname(\\\"$0\\\"), '..'))\"` echo $ENV # now run Python with the virtualenv set as Python's HOME export PYTHONHOME=$ENV exec $PYTHON \"$@\" Installing in Homebrew (macOS) \ue157 Homebrew from what I read used to have issues running wxPython in versions less than 4, but this doesn't seem to be an issue with wxPython 4 with Homebrew (at least in my testing). Faceless-MacBook-Pro:~ facelessuser$ brew install python ...a lot of install stuff Faceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/pip install rummage Collecting rummage Using cached rummage-2.3-py2.py3-none-any.whl Collecting regex (from rummage) Collecting backrefs>=1.0.1 (from rummage) Collecting gntp>=1.0.2 (from rummage) Using cached gntp-1.0.3-py2-none-any.whl Collecting chardet>=3.0.4 (from rummage) Using cached chardet-3.0.4-py2.py3-none-any.whl Collecting wxpython>=4.0.0a3 (from rummage) Using cached wxPython-4.0.0a3-cp27-cp27m-macosx_10_6_intel.whl Collecting six (from wxpython>=4.0.0a3->rummage) Using cached six-1.10.0-py2.py3-none-any.whl Installing collected packages: regex, backrefs, gntp, chardet, six, wxpython, rummage Successfully installed backrefs-1.0.1 chardet-3.0.4 gntp-1.0.3 regex-2017.7.11 rummage-2.3 six-1.10.0 wxpython-4.0.0a3 Faceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/python2 -m rummage Installing in Anaconda \ue157 Anaconda can run Rummage fine from my testing on macOS. The important thing to note is you must launch it with pythonw -m rummage on Windows and not python -m rummage . While this worked on macOS, results may vary on other systems.","title":"Installation"},{"location":"installation.html#installation","text":"","title":"Installation"},{"location":"installation.html#requirements","text":"Rummage has a few requirements when installing. These will all be taken care of when installing via pip . Name Details wxPython 4.0.1+ The new wxPython Phoenix 4.0.0 is required for the GUI. backrefs 3.5.0+ Used to extend the re or regex regular expression engine with additional back references. bracex Bash style brace expansion for file patterns. wcmatch File name matching library. chardet 3.0.4+ Used for file encoding guessing when an encoding is not specified. filelock Used for file locking to allow different instances of Rummage to access the same file. gntp Used to send notifications to Growl via the the Growl Notification Transport Protocol for all platforms (macOS, Windows, and Linux). send2trash Used for sending files to trash/recycle bin on each platform. pymdown-extensions An extension pack used in conjunction with Python Markdown to render some dynamic content into HTML that is embedded into the GUI. pygments Used to provide syntax highlighting in some of the dynamically generated HTML help. Some optional modules that can be manually installed. Name Details regex regex usage is completely optional, but it is included for those who wish to use it. Regex is a great regular expression engine that adds some nice features such as fuzzy searching, nested char sets, better Unicode support, and more. cchardet cchardet is high speed universal character encoding detector. Much faster than the default chardet .","title":"Requirements"},{"location":"installation.html#linux-prerequisites","text":"Rummage requires wxPython in order to run. If you have a recent Linux distro that has a pre-built, installable wxPython package for your version of Python, then it may make sense to just install the pre-built package via your Linux package manager ( apt-get for Ubuntu). The version must meet the version requirement above. If you have installed a version of Python on your machine that does not have a pre-built wxPython package, or if your distro simply doesn't have a pre-built package that satisfies the requirements, then it may make sense to either install via pip or to manually compile and install. In both of these cases, you will have to install the appropriate prerequisites for your Linux distro. Rummage is generally tested on Ubuntu, so instructions are generally most up to date for Ubuntu. Remember, wxPython is a separate project and our instructions may get out of sync, so please check wxPython's official documentation on prerequisites before installing. Particularly under this section . Due to recent changes in PyPI, it is probably best to ensure you have at least version 10.0 or greater of pip . Ubuntu provides a method for installing pip with sudo apt-get install python3-pip , but this usually installs an older version. It is recommended to install pip with the command shown below (where python3 is a call to the installed Python version of your choice): curl https://bootstrap.pypa.io/get-pip.py | sudo python3 Info The latest wxPython Phoenix builds with GTK3 by default, so the example below will install GTK3 related dependencies. You can use GTK2 if you build wxPython manually. Ubuntu sudo apt-get install python3.6-dev dpkg-dev build-essential libwebkitgtk-dev libjpeg-dev libtiff-dev libsdl1.2-dev libgstreamer-plugins-base1.0-dev libnotify-dev freeglut3 freeglut3-dev libgtk-3-dev libwebkitgtk-3.0-dev Replace python3.6-dev with the Python version you are using. Fedora 26 For Fedora 26, it has been reported that you need fewer dependencies to build wxPython; I have not personally confirmed this. sudo dnf install gcc-c++ wxGTK-devel gstreamer-devel webkitgtk-devel GConf2-devel gstreamer-plugins-base-devel If your Linux distribution has gstreamer 1.0 available (like the Fedora distro), you can install the dev packages for that instead of the 0.10 version. After getting all the correct prerequisites, you should be able to install Rummage with pip , though it is recommended to try and install wxPython first via pip install wxpython . If wxPython doesn't install properly, be sure to reference wxPython's documentation to see if there is something you are missing. Also, creating an issue over at wxPython's GitHub site for related wxPython install issues may get you help faster than creating them on the Rummage issue page, which is mainly meant for tracking Rummage specific issues, not wxPython install issues. Be patient while installing wxPython as Linux must build wxPython while macOS and Windows do not. If installing with pip , you may be waiting a long time with no real indication of how far along the process is. If pip doesn't work, you can look into building and installing manually. If you find any of this information incorrect, please feel free to offer a pull request.","title":"Linux Prerequisites"},{"location":"installation.html#macos-prerequisites","text":"On macOS, Rummage uses either pure Python modules, or modules that provide wheels. What this means is that no C code compilation is required to install Rummage; therefore, no prior steps are needed. But if you want to install regex , there will be some C code compilation performed by pip which will require Xcode to be installed. Download Xcode from the Mac App Store. Navigate to Xcode > Preferences > Downloads tab. Click the button to install the Command Line Tools. Open Terminal (Applications/Terminal) and run xcode-select --install . You will be prompted to install the Xcode Command Line Tools.","title":"macOS Prerequisites"},{"location":"installation.html#installation_1","text":"Here are a couple of ways to install and upgrade. Keep in mind if you are a Linux user, you have some prerequisites to install before proceeding. Install: pip install rummage Install with optional module. Upgrades of optional modules will have to be manually upgraded when needed as well as they are not tracked in Rummage's requirements. pip install rummage regex cchardet Upgrade: pip install --upgrade rummage","title":"Installation"},{"location":"installation.html#installing-in-virtual-environments-macos","text":"If installing in a virtual environment via virtualenv , you may run into the following error: This used to be a fairly annoying issue to workaround, but in wxPython 4+, it's not too bad. The wxPython wiki is a bit out of date. You don't have to symlink wx.pth or anything like that anymore as the design of wxPython is a bit different now. All you have to do is place the script below in my_virtual_env/bin . In this example I call it fwpy for \"framework python\" (make sure to adjust paths or Python versions to match your installation). #!/bin/bash # what real Python executable to use PYVER=2.7 PYTHON=/Library/Frameworks/Python.framework/Versions/$PYVER/bin/python$PYVER # find the root of the virtualenv, it should be the parent of the dir this script is in ENV=`$PYTHON -c \"import os; print os.path.abspath(os.path.join(os.path.dirname(\\\"$0\\\"), '..'))\"` echo $ENV # now run Python with the virtualenv set as Python's HOME export PYTHONHOME=$ENV exec $PYTHON \"$@\"","title":"Installing in Virtual Environments (macOS)"},{"location":"installation.html#installing-in-homebrew-macos","text":"Homebrew from what I read used to have issues running wxPython in versions less than 4, but this doesn't seem to be an issue with wxPython 4 with Homebrew (at least in my testing). Faceless-MacBook-Pro:~ facelessuser$ brew install python ...a lot of install stuff Faceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/pip install rummage Collecting rummage Using cached rummage-2.3-py2.py3-none-any.whl Collecting regex (from rummage) Collecting backrefs>=1.0.1 (from rummage) Collecting gntp>=1.0.2 (from rummage) Using cached gntp-1.0.3-py2-none-any.whl Collecting chardet>=3.0.4 (from rummage) Using cached chardet-3.0.4-py2.py3-none-any.whl Collecting wxpython>=4.0.0a3 (from rummage) Using cached wxPython-4.0.0a3-cp27-cp27m-macosx_10_6_intel.whl Collecting six (from wxpython>=4.0.0a3->rummage) Using cached six-1.10.0-py2.py3-none-any.whl Installing collected packages: regex, backrefs, gntp, chardet, six, wxpython, rummage Successfully installed backrefs-1.0.1 chardet-3.0.4 gntp-1.0.3 regex-2017.7.11 rummage-2.3 six-1.10.0 wxpython-4.0.0a3 Faceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/python2 -m rummage","title":"Installing in Homebrew (macOS)"},{"location":"installation.html#installing-in-anaconda","text":"Anaconda can run Rummage fine from my testing on macOS. The important thing to note is you must launch it with pythonw -m rummage on Windows and not python -m rummage . While this worked on macOS, results may vary on other systems.","title":"Installing in Anaconda"},{"location":"license.html","text":"License \ue157 MIT license. Copyright \u00a9 2013 - 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Internal documentation includes use of Font Awesome 4.7 by Dave Gandy . Only a subset of the icons are actually distributed with Rummage. The subset of icons was generated by Fontello . The Font Awesome font is licensed under the SIL OFL 1.1","title":"License"},{"location":"license.html#license","text":"MIT license. Copyright \u00a9 2013 - 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Internal documentation includes use of Font Awesome 4.7 by Dave Gandy . Only a subset of the icons are actually distributed with Rummage. The subset of icons was generated by Fontello . The Font Awesome font is licensed under the SIL OFL 1.1","title":"License"},{"location":"preferences.html","text":"Settings \ue157 Overview \ue157 The preference dialog is found in the menu at File\u2192Preferences and contains all of the global options that can be controlled for the editor. General \ue157 The General tab contains a couple of useful settings. Single Instance By default, Rummage will allow for multiple windows to be open. If this option is enabled, the first window will be be the only window to open. All subsequent instances will pass their arguments to the first and close without showing a window. Language Rummage has internal support to display dialog labels in different languages. Currently Rummage has English. Russian is outdated but includes a fair bit of the needed translations. See Localization to learn more about improving current translations or adding additional translations. Updates Controls whether Rummage will check for new updates daily and allows controlling whether you want to be notified of prereleases as well. A button has also been provided to check for updates right away after configuring your update settings. The check is only a check for new versions and doesn't perform an upgrade. Rummage must be upgraded via pip from command line. Update Issues: Python 3.6+ on macOS There is a small issue on macOS with Python 3.6+: Python 3.6 changed how it gets the default certificates required to properly check URLs. The details are actually documented here: https://bugs.python.org/issue28150#msg276516 . To get access again to the default certificates is actually quite easy. Assuming that Python 3.6+ was installed using the macOS installer from Python.org, you just need to navigate to /Applications/Python 3.6/Install Certificates.command and double click the command. The script will use pip to install certifi and creates a symlink in the OpenSSL directory to certifi 's installed bundle location. If you are using something like macports, then you'll probably have to research to find out how to do the same thing. International Time Rummage displays file creation and modified time in the form Jul 01, 2018, 03:00:00 AM , but you can enable this option to display the times in international format: 2018-07-01 03:00:00 . Search \ue157 The Regular Expression Modules panel is where the desired regular expression engine that Rummage uses can be selected and configured. By default, Rummage will use Re, but if the Regex module is installed in your Python installation, it can be selected instead. There is also the option of using Re or Regex with Backrefs (a wrapper that adds a couple of special escapes and features). If using Regex, you can set it to the version of your choice. V0 tries to be completely compatible with Re patterns with non-breaking additional features, while V1 breaks compatibility with Re and adds even more useful features. Please see Regex documentation to learn more. Under File/Folder Matching are a number options for file and folder matching patterns. Follow the links to learn more about each feature: Extended match . Brace expansion . Case sensitive for wildcard match and for regular expression match . Globstar . Full path directory matching . Full path file matching . Encoding \ue157 The Encoding panel is where you can tweak encoding detection. You can change the default encoding detection used (assuming you have both Chardet and cChardet installed). By default, Rummage will use the fastest (cChardet). Special encoding file type considerations are also exposed here. File extensions assigned to either HTML, XML, or Python will use special logic to look for encoding declarations in the file's header, while file extensions assigned to binary will shortcut the encoding selection to binary. Just double click the file type whose extensions you would like to modify. Remember that encoding detection is far from bulletproof and can pick an incorrect encoding. While during searches it might not be as big an issue, it is strongly suggested you use a forced encoding when performing replaces. Editor \ue157 The Editor panel allows you to configure the editor that will be used to open files. To setup, simply enter the path to the editor and the options it should be called with. Once done, press the save button. As noted in the image above, Rummage provides 3 special variables that can be used to insert the file name, line number, or column number. Argument Variables Description {$file} Insert the file name. {$line} Insert the line number. {$col} Insert the column number. Notifications \ue157 The Notification panel controls enabling/disabling and configuration of notifications. You can enable/disable visual notifications and/or audible notification sounds. You can also select whether to use the system's built-in notifications or Growl. A test button is provided to test the configuration once set. Ubuntu Growl: Support for Linux . Native: OSD via notify-send . Other Distros Though Rummage should run on any Linux distro, the native dialog option was built around Ubuntu's native notifications called OSD. Notifications will not work on other distros that do not use OSD unless they use Growl. Even without Growl, other distros will probably still get the audible cue, but as each distro varies, it is difficult to be certain. As notifications are not crucial to usage, this is minor concern. macOS Growl: Support for macOS . Native: Notification Center via terminal-notifier . Path to terminal-notifier must be configured. Configuring macOS Native When selecting native on macOS, an option to select the path to terminal notifier will be available since native dialogs rely on terminal-notifier to send notifications to the Notification Center. This must be configured or native notifications will not work. When selecting the terminal-notifier path, you can select either the binary directly or the .<app bundle (depending on how you installed terminal-notifier ). When selecting the .app bundle, Rummage will know how to access the binary inside the bundle. Windows Growl: Support for Windows . Native: Native windows taskbar notifications. History \ue157 The History panel is where all text box, drop down history can be cleared. Backups \ue157 The Backups panel allows you to configure where Rummage creates backups. You can control whether backups are all placed in the same folder as the original source, or if they are put into a subfolder. You can also configure the name of the subfolder used or the extension used when not writing to a subfolder. Import/Export Settings \ue157 If desired, Rummage's settings can be exported to a JSON file or imported from a JSON file. This can be particularly useful for importing regular expression patterns from one system into another system's existing regular expression list. This can also be useful if you have a lot of regular expression patterns you wish to create, and it would be too cumbersome to do it through the GUI. In the latter case, you could construct the pattern configurations in a JSON file and import all the patterns in one shot. Import and export are broken up into three types of settings: general settings, chains, and searches. General settings are the basic feature configurations for Rummage. Chains contains all of your configured pattern chains. And searches is the actual configured search and replaces. When exporting, you will be presented with a dialog allowing you to select which categories of settings you wish to export. When importing, you will be prompted to select the settings file to import. Then you will be asked to select one or more settings categories to import. Rummage will skip any malformed or invalid settings. If you are going to overwrite an existing chain or search, it will prompt you whether to proceed with the overwrite. Afterwards, it will output the import results in the text box. The general settings are meant to be transferred between installations, not specifically configured by hand, so all the supported settings will not be covered here, but the chain and search format will be discussed in details. The chain format for importing is shown below: { \"chains\" : { // The key that denotes this setting is the \"chains\" setting. \"a-chain\" : [ // Unique chain ID. Must be composed of letters, numbers, underscores, and hyphens. \"example-1\" , // A list of references to specific unique search IDs. \"example-2\" ], \"another-chain\" : [ \"example-3\" , \"example-4\" ] } } The search/replace format for importing is show below: { \"saved_searches\" : { // The key that denotes this setting is the \"chains\" setting. \"Copyright-update\" : { // Unique search ID. Must be composed of letters, numbers, underscores, and hyphens. \"flags\" : \"is\" , // Search and replace flags (covered below). \"is_function\" : false , // Boolean stating whether the replace pattern is a function or not. \"is_regex\" : true , // Boolean stating whether the search pattern is a regular expression or literal string. \"name\" : \"Copyright update\" , // A more user friendly name or description of the pattern. \"replace\" : \"\\\\g<1>16\" , // The replace pattern, or in case `is_function` is `true`, the path to the Python replace plugin file. \"search\" : \"(Copyright \\\\(c\\\\) \\\\d+ - 20)(\\\\d{2})\" // The search pattern. } } } Below is a table containing valid flags for the flags parameter. Literal searches only allow flags i , u , and f . Regular expression patterns can use i , u , f , s , b , e , w , r , p , and F (though flags are applicable depending on whether you are using Re, Regex, or one of the two with Backrefs). Flags Supported Libraries Option i All Search case-sensitive. u All Use Unicode properties. s All Dot matches newline. f Regex, Regex + Backrefs Full case-folding. b Regex, Regex + Backrefs Best fuzzy match. e Regex, Regex + Backrefs Improve fuzzy fit. w Regex, Regex + Backrefs Unicode word breaks. r Regex, Regex + Backrefs Search backwards. p Regex, Regex + Backrefs Use POSIX matching. F Regex, Regex + Backrefs, Re + Backrefs Format style replacements.","title":"Settings"},{"location":"preferences.html#settings","text":"","title":"Settings"},{"location":"preferences.html#overview","text":"The preference dialog is found in the menu at File\u2192Preferences and contains all of the global options that can be controlled for the editor.","title":"Overview"},{"location":"preferences.html#general","text":"The General tab contains a couple of useful settings. Single Instance By default, Rummage will allow for multiple windows to be open. If this option is enabled, the first window will be be the only window to open. All subsequent instances will pass their arguments to the first and close without showing a window. Language Rummage has internal support to display dialog labels in different languages. Currently Rummage has English. Russian is outdated but includes a fair bit of the needed translations. See Localization to learn more about improving current translations or adding additional translations. Updates Controls whether Rummage will check for new updates daily and allows controlling whether you want to be notified of prereleases as well. A button has also been provided to check for updates right away after configuring your update settings. The check is only a check for new versions and doesn't perform an upgrade. Rummage must be upgraded via pip from command line. Update Issues: Python 3.6+ on macOS There is a small issue on macOS with Python 3.6+: Python 3.6 changed how it gets the default certificates required to properly check URLs. The details are actually documented here: https://bugs.python.org/issue28150#msg276516 . To get access again to the default certificates is actually quite easy. Assuming that Python 3.6+ was installed using the macOS installer from Python.org, you just need to navigate to /Applications/Python 3.6/Install Certificates.command and double click the command. The script will use pip to install certifi and creates a symlink in the OpenSSL directory to certifi 's installed bundle location. If you are using something like macports, then you'll probably have to research to find out how to do the same thing. International Time Rummage displays file creation and modified time in the form Jul 01, 2018, 03:00:00 AM , but you can enable this option to display the times in international format: 2018-07-01 03:00:00 .","title":"General"},{"location":"preferences.html#search","text":"The Regular Expression Modules panel is where the desired regular expression engine that Rummage uses can be selected and configured. By default, Rummage will use Re, but if the Regex module is installed in your Python installation, it can be selected instead. There is also the option of using Re or Regex with Backrefs (a wrapper that adds a couple of special escapes and features). If using Regex, you can set it to the version of your choice. V0 tries to be completely compatible with Re patterns with non-breaking additional features, while V1 breaks compatibility with Re and adds even more useful features. Please see Regex documentation to learn more. Under File/Folder Matching are a number options for file and folder matching patterns. Follow the links to learn more about each feature: Extended match . Brace expansion . Case sensitive for wildcard match and for regular expression match . Globstar . Full path directory matching . Full path file matching .","title":"Search"},{"location":"preferences.html#encoding","text":"The Encoding panel is where you can tweak encoding detection. You can change the default encoding detection used (assuming you have both Chardet and cChardet installed). By default, Rummage will use the fastest (cChardet). Special encoding file type considerations are also exposed here. File extensions assigned to either HTML, XML, or Python will use special logic to look for encoding declarations in the file's header, while file extensions assigned to binary will shortcut the encoding selection to binary. Just double click the file type whose extensions you would like to modify. Remember that encoding detection is far from bulletproof and can pick an incorrect encoding. While during searches it might not be as big an issue, it is strongly suggested you use a forced encoding when performing replaces.","title":"Encoding"},{"location":"preferences.html#editor","text":"The Editor panel allows you to configure the editor that will be used to open files. To setup, simply enter the path to the editor and the options it should be called with. Once done, press the save button. As noted in the image above, Rummage provides 3 special variables that can be used to insert the file name, line number, or column number. Argument Variables Description {$file} Insert the file name. {$line} Insert the line number. {$col} Insert the column number.","title":"Editor"},{"location":"preferences.html#notifications","text":"The Notification panel controls enabling/disabling and configuration of notifications. You can enable/disable visual notifications and/or audible notification sounds. You can also select whether to use the system's built-in notifications or Growl. A test button is provided to test the configuration once set. Ubuntu Growl: Support for Linux . Native: OSD via notify-send . Other Distros Though Rummage should run on any Linux distro, the native dialog option was built around Ubuntu's native notifications called OSD. Notifications will not work on other distros that do not use OSD unless they use Growl. Even without Growl, other distros will probably still get the audible cue, but as each distro varies, it is difficult to be certain. As notifications are not crucial to usage, this is minor concern. macOS Growl: Support for macOS . Native: Notification Center via terminal-notifier . Path to terminal-notifier must be configured. Configuring macOS Native When selecting native on macOS, an option to select the path to terminal notifier will be available since native dialogs rely on terminal-notifier to send notifications to the Notification Center. This must be configured or native notifications will not work. When selecting the terminal-notifier path, you can select either the binary directly or the .<app bundle (depending on how you installed terminal-notifier ). When selecting the .app bundle, Rummage will know how to access the binary inside the bundle. Windows Growl: Support for Windows . Native: Native windows taskbar notifications.","title":"Notifications"},{"location":"preferences.html#history","text":"The History panel is where all text box, drop down history can be cleared.","title":"History"},{"location":"preferences.html#backups","text":"The Backups panel allows you to configure where Rummage creates backups. You can control whether backups are all placed in the same folder as the original source, or if they are put into a subfolder. You can also configure the name of the subfolder used or the extension used when not writing to a subfolder.","title":"Backups"},{"location":"preferences.html#importexport-settings","text":"If desired, Rummage's settings can be exported to a JSON file or imported from a JSON file. This can be particularly useful for importing regular expression patterns from one system into another system's existing regular expression list. This can also be useful if you have a lot of regular expression patterns you wish to create, and it would be too cumbersome to do it through the GUI. In the latter case, you could construct the pattern configurations in a JSON file and import all the patterns in one shot. Import and export are broken up into three types of settings: general settings, chains, and searches. General settings are the basic feature configurations for Rummage. Chains contains all of your configured pattern chains. And searches is the actual configured search and replaces. When exporting, you will be presented with a dialog allowing you to select which categories of settings you wish to export. When importing, you will be prompted to select the settings file to import. Then you will be asked to select one or more settings categories to import. Rummage will skip any malformed or invalid settings. If you are going to overwrite an existing chain or search, it will prompt you whether to proceed with the overwrite. Afterwards, it will output the import results in the text box. The general settings are meant to be transferred between installations, not specifically configured by hand, so all the supported settings will not be covered here, but the chain and search format will be discussed in details. The chain format for importing is shown below: { \"chains\" : { // The key that denotes this setting is the \"chains\" setting. \"a-chain\" : [ // Unique chain ID. Must be composed of letters, numbers, underscores, and hyphens. \"example-1\" , // A list of references to specific unique search IDs. \"example-2\" ], \"another-chain\" : [ \"example-3\" , \"example-4\" ] } } The search/replace format for importing is show below: { \"saved_searches\" : { // The key that denotes this setting is the \"chains\" setting. \"Copyright-update\" : { // Unique search ID. Must be composed of letters, numbers, underscores, and hyphens. \"flags\" : \"is\" , // Search and replace flags (covered below). \"is_function\" : false , // Boolean stating whether the replace pattern is a function or not. \"is_regex\" : true , // Boolean stating whether the search pattern is a regular expression or literal string. \"name\" : \"Copyright update\" , // A more user friendly name or description of the pattern. \"replace\" : \"\\\\g<1>16\" , // The replace pattern, or in case `is_function` is `true`, the path to the Python replace plugin file. \"search\" : \"(Copyright \\\\(c\\\\) \\\\d+ - 20)(\\\\d{2})\" // The search pattern. } } } Below is a table containing valid flags for the flags parameter. Literal searches only allow flags i , u , and f . Regular expression patterns can use i , u , f , s , b , e , w , r , p , and F (though flags are applicable depending on whether you are using Re, Regex, or one of the two with Backrefs). Flags Supported Libraries Option i All Search case-sensitive. u All Use Unicode properties. s All Dot matches newline. f Regex, Regex + Backrefs Full case-folding. b Regex, Regex + Backrefs Best fuzzy match. e Regex, Regex + Backrefs Improve fuzzy fit. w Regex, Regex + Backrefs Unicode word breaks. r Regex, Regex + Backrefs Search backwards. p Regex, Regex + Backrefs Use POSIX matching. F Regex, Regex + Backrefs, Re + Backrefs Format style replacements.","title":"Import/Export Settings"},{"location":"search.html","text":"Search Features \ue157 Search Options \ue157 Rummage supports the default regular expression library ( Re ) that comes with Python and the 3 rd party Regex library, and though the basic syntax and features are similar between the two, Regex provides many additional features, some of which causes the syntax to deviate greatly from Re. If you are using Re, you will not see all the options shown below. Please check out documentation for whichever engine you have chosen to learn more about its specific feature set. This documentation will only briefly cover the features that can be enabled in each engine. Common Options \ue157 Both the Re and Regex engine have a couple of shared flags that are exposed in Rummage as checkboxes. These checkboxes are found directly under the search and replace text boxes. Toggle Description Search with regex Alters the behavior of Search for and Replace with . When this is checked, both text boxes require regular expression patterns opposed to literal string. Search case-sensitive Forces the search to be case-sensitive. Dot matches newline . will also match newlines. Use Unicode properties Changes the behavior of \\w , \\W , \\b , \\B , \\d , \\D , \\s , and \\S to use use characters from the Unicode property database (will also modify \\l , \\L , \\c , and \\C in search patterns if using Backrefs with Re). Format style replacements Replace pattern will use a string replace format for replace. \" {1} {1[-2]} {group_name[-3]} \" etc. This is not available for Re without Backrefs, and is limited when using Re with Backrefs. Read more about format mode here . And remember that Rummage normalizes differences in Backrefs' and Regex's handling of back slash escapes in format replace mode. Regex Engine Options \ue157 If the Regex engine is being used for regular expressions, a couple of extra checkboxes will be available. Regex can be run in either VERSION0 or VERSION1 mode. VERSION0 is compatible with Re regular expression patterns and has the extra fullcase toggle. VERSION1 does not have this toggle as it is enabled by default and can only be disabled inline via a pattern with (?-f) . VERSION1 is not directly compatible with Re patterns as it adds a number of changes to the syntax allowing for more advanced search options. Toggle Description Best fuzzy match If performing a fuzzy match, the best fuzzy match will be used. Improve fuzzy fit Makes fuzzy matching attempt to improve the fit of the next match that it finds. Unicode word breaks Will use proper Unicode word breaks and line separators when Unicode is enabled. See Regex documentation for more info. Use POSIX matching Use the POSIX standard for regular expression, which is to return the leftmost longest match. Search backwards Search backwards. The result of a reverse search is not necessarily the reverse of a forward search. Full case-folding Use full case folding. For Regex V0 only as it is enabled by default for V1 . Rummage Options \ue157 Rummage has a couple of flags that are not specific to the regular expression engine. Toggle Description Boolean match Will check each file up until the first match and will halt searching further. No line context info will be gathered or displayed. Does not apply when performing replaces. Count only Will just count the number of matches in the file and will not display line context information. This has no effect when applying replaces. Create backups On replace, files with matches will be backed up before applying the replacements; backup files will have the .rum-bak extension. Force <encoding> Forces all files to be opened with the specified encoding opposed to trying to detect the encoding. Encoding is hard and slow, so this is the preferred method for fast searches. On failure, binary will be used instead. Use chain search Puts Rummage into \"search chain\" mode . When in \"search chain\" mode, rummage will only use saved search chains for search and replace. Use replace plugin When enabled, Rummage will use a replace plugin instead of a replace pattern in order to do more advanced replaces. Encoding Guessing It is always recommended, if you know the encoding, to use Force encoding as it will always be the fastest. Encoding guessing can be slow and not always accurate. Encoding guessing is performed by chardet which is a pure Python library and is, by far, the slowest option. If you manually install cChardet , you will have a much faster guessing experience. File Patterns \ue157 Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. Wildcard patterns and regular expression patterns will each be covered separately. Wildcard \ue157 Rummage uses file patterns and folder excludes to filter which files are searched. The default is to use wild card patterns modeled after fnmatch and glob . Below is a list of the syntax that is accepted, but not all features are enabled by default. If you would prefer regular expression file patterns, please see Regular Expression file patterns. File patterns are case insensitive by default, even for Linux/Unix systems. Case sensitivity can be enabled in Preferences . Slashes are generally treated as normal characters, but on windows they will be normalized: / will become \\\\ . There is no need to explicitly use \\\\ in patterns on Windows, but if you do, it will be handled. . is always matched by * , ? , [] , and extended patterns such as *(...) . Use enable searching hidden files in the Limit Panel . Basic Wildcard syntax \ue157 Rummage uses the wcmatch library to implement a specialized version of fnmatch wildcard patterns for file name matching. Pattern Meaning * Matches everything. ? Matches any single character. [seq] Matches any character in seq. [!seq] Matches any character not in seq. [[:alnum:]] POSIX style character classes inside sequences. The C locale is used for byte strings and Unicode properties for Unicode strings. See POSIX Character Classes in wcmatch 's documentation for more info. \\ Escapes characters. If applied to a meta character, it will be treated as a normal character. | Multiple patterns can be provided by separating them with | . - If - is found at the start of a pattern, it will match the inverse. \\xhh By specifying \\x followed by the hexadecimal byte value, you can specify characters directly. \\uhhhh By specifying \\u with the four value hexadecimal character value, you can specify Unicode characters directly. \\Uhhhhhhhh By specifying \\U with the eight value hexadecimal character value, you can specify wide Unicode characters directly. \\N{name} By specifying \\N{name} , where name is a valid Unicode character name, you can specify Unicode characters directly. \\a ASCII Bell (BEL). \\b ASCII Backspace (BS). \\f ASCII Formfeed (FF). \\n ASCII Linefeed (LF). \\r ASCII Carriage Return (CR). \\t ASCII Horizontal Tab (TAB). \\v ASCII Vertical Tab (VT). Example Patterns Used in the Files which match box, this would match all Python files of .py extensions excluding __init__.py : *.py|-__init__.py Used in the Files which match box, this would match any file type that is not .py . -*.py Used in the Exclude folders , this would exclude all folders with name followed by a single digit, except name3 which we will always be included. name[0-9]|-name3 Used in the Exclude folders , this would exclude all folders except name3 . -name3 If you need to escape - or | , you can put them in a sequence: [-|] . Remember to place - at the beginning of a sequence as - is also used to specify character ranges: [a-z] . Extended Match Syntax \ue157 In Preferences , you can also enable extended match patterns. Extended match patterns allow you to provide pattern lists to provide more advanced logic. Pattern Meaning ?(pattern_list) The pattern matches if zero or one occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. *(pattern_list) The pattern matches if zero or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. +(pattern_list) The pattern matches if one or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. @(pattern_list) The pattern matches if exactly one occurrence of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. !(pattern_list) The pattern matches if the input string cannot be matched with any of the patterns in the pattern_list . Requires extended match feature to be enabled. {} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. Example Extended Match Patterns For example, if we wanted to match files this-file.txt and that-file.txt , we could provide the following pattern: @(this|that)-file.txt The | contained within an extended match group will not split the pattern. So it is safe to combine with other patterns: @(this|that)-file.txt|*.py Brace Expansion Syntax \ue157 In Preferences , you can enables Bash style brace expansion. Brace expansion is applied before anything else. When applied, a pattern will be expanded into multiple patterns. Each pattern will then be parsed separately. This is great for specifying complex combinations of patterns: a{b,{c,d}} \u2192 ab ac ad . Since each brace will generate a separate pattern for each combination that Rummage must evaluate. For simple patterns, it may make more sense to use extended match patterns which will only generate a single pattern: @(ab|ac|ad) . Be careful with patterns such as {1..100} which would generate one hundred patterns that will all get individually parsed. Sometimes you really need such a pattern, but be mindful that it will be slower as you generate larger sets of patterns. Pattern Meaning {,} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. {n1..n2[..i]} Bash style sequences that expands a range of numbers or alphabetic characters by an optional increment. Example Brace Expansion a{b,{c,d}} \u2192 ab ac ad {1..3} \u2192 1 2 3 {a..d} \u2192 a b c d {2..4..2} \u2192 2 4 {a..e..2} \u2192 a c e Full Path Matching \ue157 In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder to search of /My/base/path , and you were to match a file /My/base/path/some/file.txt , normally your file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt . This means you'd have to use pattern like */*.txt instead of *.txt . When full path matching is enabled for a pattern, slashes are generally treated special. Slashes will not be matched in [] , * , ? , or extended patterns like *(...) . Slashes can be matched by ** if globstar ( ** ) is enabled in Preferences . Pattern Meaning ** Matches zero or more directories. Only available for full path matching which is disabled by default. Regular Expression \ue157 Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. The regular expression engine set in Preferences is what will be used for file patterns. It will also respect the case sensitivity setting in Preferences for File/Folder Matching . Full Path Matching \ue157 In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder to search of /My/base/path , and you were to match a file /My/base/path/some/file.txt , normally your file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt . This means you'd have to use pattern like .*/.*.txt instead of .*.txt . Backrefs \ue157 Rummage has the option of using a special wrapper called Backrefs. Backrefs can be applied to either Re or Regex. It adds various back references that are known to some regular expression engines, but not to Python's Re or Regex modules. The supported back references actually vary depending on whether it is being applied to Re or Regex. For instance, Backrefs only adds Unicode Properties to Re since Regex already has Unicode properties. To learn more about Backrefs adds, read the official Backrefs documentation . You can enable extended back references in the Preferences dialog.","title":"Search Features"},{"location":"search.html#search-features","text":"","title":"Search Features"},{"location":"search.html#search-options","text":"Rummage supports the default regular expression library ( Re ) that comes with Python and the 3 rd party Regex library, and though the basic syntax and features are similar between the two, Regex provides many additional features, some of which causes the syntax to deviate greatly from Re. If you are using Re, you will not see all the options shown below. Please check out documentation for whichever engine you have chosen to learn more about its specific feature set. This documentation will only briefly cover the features that can be enabled in each engine.","title":"Search Options"},{"location":"search.html#common-options","text":"Both the Re and Regex engine have a couple of shared flags that are exposed in Rummage as checkboxes. These checkboxes are found directly under the search and replace text boxes. Toggle Description Search with regex Alters the behavior of Search for and Replace with . When this is checked, both text boxes require regular expression patterns opposed to literal string. Search case-sensitive Forces the search to be case-sensitive. Dot matches newline . will also match newlines. Use Unicode properties Changes the behavior of \\w , \\W , \\b , \\B , \\d , \\D , \\s , and \\S to use use characters from the Unicode property database (will also modify \\l , \\L , \\c , and \\C in search patterns if using Backrefs with Re). Format style replacements Replace pattern will use a string replace format for replace. \" {1} {1[-2]} {group_name[-3]} \" etc. This is not available for Re without Backrefs, and is limited when using Re with Backrefs. Read more about format mode here . And remember that Rummage normalizes differences in Backrefs' and Regex's handling of back slash escapes in format replace mode.","title":"Common Options"},{"location":"search.html#regex-engine-options","text":"If the Regex engine is being used for regular expressions, a couple of extra checkboxes will be available. Regex can be run in either VERSION0 or VERSION1 mode. VERSION0 is compatible with Re regular expression patterns and has the extra fullcase toggle. VERSION1 does not have this toggle as it is enabled by default and can only be disabled inline via a pattern with (?-f) . VERSION1 is not directly compatible with Re patterns as it adds a number of changes to the syntax allowing for more advanced search options. Toggle Description Best fuzzy match If performing a fuzzy match, the best fuzzy match will be used. Improve fuzzy fit Makes fuzzy matching attempt to improve the fit of the next match that it finds. Unicode word breaks Will use proper Unicode word breaks and line separators when Unicode is enabled. See Regex documentation for more info. Use POSIX matching Use the POSIX standard for regular expression, which is to return the leftmost longest match. Search backwards Search backwards. The result of a reverse search is not necessarily the reverse of a forward search. Full case-folding Use full case folding. For Regex V0 only as it is enabled by default for V1 .","title":"Regex Engine Options"},{"location":"search.html#rummage-options","text":"Rummage has a couple of flags that are not specific to the regular expression engine. Toggle Description Boolean match Will check each file up until the first match and will halt searching further. No line context info will be gathered or displayed. Does not apply when performing replaces. Count only Will just count the number of matches in the file and will not display line context information. This has no effect when applying replaces. Create backups On replace, files with matches will be backed up before applying the replacements; backup files will have the .rum-bak extension. Force <encoding> Forces all files to be opened with the specified encoding opposed to trying to detect the encoding. Encoding is hard and slow, so this is the preferred method for fast searches. On failure, binary will be used instead. Use chain search Puts Rummage into \"search chain\" mode . When in \"search chain\" mode, rummage will only use saved search chains for search and replace. Use replace plugin When enabled, Rummage will use a replace plugin instead of a replace pattern in order to do more advanced replaces. Encoding Guessing It is always recommended, if you know the encoding, to use Force encoding as it will always be the fastest. Encoding guessing can be slow and not always accurate. Encoding guessing is performed by chardet which is a pure Python library and is, by far, the slowest option. If you manually install cChardet , you will have a much faster guessing experience.","title":"Rummage Options"},{"location":"search.html#file-patterns","text":"Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. Wildcard patterns and regular expression patterns will each be covered separately.","title":"File Patterns"},{"location":"search.html#wildcard","text":"Rummage uses file patterns and folder excludes to filter which files are searched. The default is to use wild card patterns modeled after fnmatch and glob . Below is a list of the syntax that is accepted, but not all features are enabled by default. If you would prefer regular expression file patterns, please see Regular Expression file patterns. File patterns are case insensitive by default, even for Linux/Unix systems. Case sensitivity can be enabled in Preferences . Slashes are generally treated as normal characters, but on windows they will be normalized: / will become \\\\ . There is no need to explicitly use \\\\ in patterns on Windows, but if you do, it will be handled. . is always matched by * , ? , [] , and extended patterns such as *(...) . Use enable searching hidden files in the Limit Panel .","title":"Wildcard"},{"location":"search.html#basic-wildcard-syntax","text":"Rummage uses the wcmatch library to implement a specialized version of fnmatch wildcard patterns for file name matching. Pattern Meaning * Matches everything. ? Matches any single character. [seq] Matches any character in seq. [!seq] Matches any character not in seq. [[:alnum:]] POSIX style character classes inside sequences. The C locale is used for byte strings and Unicode properties for Unicode strings. See POSIX Character Classes in wcmatch 's documentation for more info. \\ Escapes characters. If applied to a meta character, it will be treated as a normal character. | Multiple patterns can be provided by separating them with | . - If - is found at the start of a pattern, it will match the inverse. \\xhh By specifying \\x followed by the hexadecimal byte value, you can specify characters directly. \\uhhhh By specifying \\u with the four value hexadecimal character value, you can specify Unicode characters directly. \\Uhhhhhhhh By specifying \\U with the eight value hexadecimal character value, you can specify wide Unicode characters directly. \\N{name} By specifying \\N{name} , where name is a valid Unicode character name, you can specify Unicode characters directly. \\a ASCII Bell (BEL). \\b ASCII Backspace (BS). \\f ASCII Formfeed (FF). \\n ASCII Linefeed (LF). \\r ASCII Carriage Return (CR). \\t ASCII Horizontal Tab (TAB). \\v ASCII Vertical Tab (VT). Example Patterns Used in the Files which match box, this would match all Python files of .py extensions excluding __init__.py : *.py|-__init__.py Used in the Files which match box, this would match any file type that is not .py . -*.py Used in the Exclude folders , this would exclude all folders with name followed by a single digit, except name3 which we will always be included. name[0-9]|-name3 Used in the Exclude folders , this would exclude all folders except name3 . -name3 If you need to escape - or | , you can put them in a sequence: [-|] . Remember to place - at the beginning of a sequence as - is also used to specify character ranges: [a-z] .","title":"Basic Wildcard syntax"},{"location":"search.html#extended-match-syntax","text":"In Preferences , you can also enable extended match patterns. Extended match patterns allow you to provide pattern lists to provide more advanced logic. Pattern Meaning ?(pattern_list) The pattern matches if zero or one occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. *(pattern_list) The pattern matches if zero or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. +(pattern_list) The pattern matches if one or more occurrences of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. @(pattern_list) The pattern matches if exactly one occurrence of any of the patterns in the pattern_list match the input string. Requires extended match feature to be enabled. !(pattern_list) The pattern matches if the input string cannot be matched with any of the patterns in the pattern_list . Requires extended match feature to be enabled. {} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. Example Extended Match Patterns For example, if we wanted to match files this-file.txt and that-file.txt , we could provide the following pattern: @(this|that)-file.txt The | contained within an extended match group will not split the pattern. So it is safe to combine with other patterns: @(this|that)-file.txt|*.py","title":"Extended Match Syntax"},{"location":"search.html#brace-expansion-syntax","text":"In Preferences , you can enables Bash style brace expansion. Brace expansion is applied before anything else. When applied, a pattern will be expanded into multiple patterns. Each pattern will then be parsed separately. This is great for specifying complex combinations of patterns: a{b,{c,d}} \u2192 ab ac ad . Since each brace will generate a separate pattern for each combination that Rummage must evaluate. For simple patterns, it may make more sense to use extended match patterns which will only generate a single pattern: @(ab|ac|ad) . Be careful with patterns such as {1..100} which would generate one hundred patterns that will all get individually parsed. Sometimes you really need such a pattern, but be mindful that it will be slower as you generate larger sets of patterns. Pattern Meaning {,} Bash style brace expansions. This is applied to patterns before anything else. Requires brace expansion feature to be enabled. {n1..n2[..i]} Bash style sequences that expands a range of numbers or alphabetic characters by an optional increment. Example Brace Expansion a{b,{c,d}} \u2192 ab ac ad {1..3} \u2192 1 2 3 {a..d} \u2192 a b c d {2..4..2} \u2192 2 4 {a..e..2} \u2192 a c e","title":"Brace Expansion Syntax"},{"location":"search.html#full-path-matching","text":"In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder to search of /My/base/path , and you were to match a file /My/base/path/some/file.txt , normally your file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt . This means you'd have to use pattern like */*.txt instead of *.txt . When full path matching is enabled for a pattern, slashes are generally treated special. Slashes will not be matched in [] , * , ? , or extended patterns like *(...) . Slashes can be matched by ** if globstar ( ** ) is enabled in Preferences . Pattern Meaning ** Matches zero or more directories. Only available for full path matching which is disabled by default.","title":"Full Path Matching"},{"location":"search.html#regular-expression","text":"Wildcard patterns are the default for file and folder exclude patterns, but regular expression patterns can be used instead by selecting the Regex checkbox beside the pattern. The regular expression engine set in Preferences is what will be used for file patterns. It will also respect the case sensitivity setting in Preferences for File/Folder Matching .","title":"Regular Expression"},{"location":"search.html#full-path-matching_1","text":"In Preferences , you can enable full path search for either file patterns and/or folder exclude patterns. This will allow for matching against a full path instead of the base file name. While it is referred to as \"full path\", it is still relative to the provided base path. Assuming you Provided a base folder to search of /My/base/path , and you were to match a file /My/base/path/some/file.txt , normally your file pattern would match against file.txt , but with full path enabled, you'd match against some/file.txt . This means you'd have to use pattern like .*/.*.txt instead of .*.txt .","title":"Full Path Matching"},{"location":"search.html#backrefs","text":"Rummage has the option of using a special wrapper called Backrefs. Backrefs can be applied to either Re or Regex. It adds various back references that are known to some regular expression engines, but not to Python's Re or Regex modules. The supported back references actually vary depending on whether it is being applied to Re or Regex. For instance, Backrefs only adds Unicode Properties to Re since Regex already has Unicode properties. To learn more about Backrefs adds, read the official Backrefs documentation . You can enable extended back references in the Preferences dialog.","title":"Backrefs"},{"location":"usage.html","text":"Basic Usage \ue157 Overview \ue157 Rummage is designed to be easy to pick up. Its interface consists of three tabs: Search, Files, and Content. In the Search tab, a user specifies where they want to search, what they want to search for, and optionally what they want to replace it with. Search features can be tweaked with various options. The files that get searched can also be narrowed with patterns and filters. Rummage uses the default regular expression library ( Re ) that comes with Python. It also optionally works with the 3 rd party Regex library (if installed). As matches are found, general info about the matches will be displayed in the Files and Content tabs. You can double click files to open them in your favorite editor (see Editor Preferences to configure Rummage for your editor). Rummage also comes with a simple regular expression tester to test out patterns. It also provides a feature where patterns can be saved for later and/or frequent use. You can even create chains that will apply a series of saved searches. Running \ue157 Once Rummage is installed, you can run it from the command line (assuming your Python scripts/bin folder is in your system path): rummage If you have multiple Python versions installed, you can call Rummage for that specific Python version by appending the major and minor Python version to the end: rummage3.6 In some environments, it may make sense to run Rummage with pythonw which is mainly for launching GUI scripts ( pythonw is not available on Linux). In some environments, it may be required (see Running in Anaconda ). pythonw -m rummage Searching & Replacing \ue157 Search and replaces are configured in the Search tab which is broken up into 2 panels, the first of which is the Search & Replace panel. The second is the Limit Search panel. Search Panel \ue157 The Search & Replace panel contains three text boxes with a dropdown history. The first text box defines where to search , the second defines what to search for , and the last defines what to replace matches with . You can select previously used patterns and search targets by expanding the dropdown panel for the input. Below the text boxes are checkboxes that control the regular expression engine's options and features. The available features will vary depending on which regular expression engine you are using. Each feature is documented in Search Options . Lastly, Rummage provides buttons to launch a regular expression tester , dialogs to save or load frequently used regular expressions, and a dialog to create and manage regular expression chains . Limit Search Panel \ue157 The Limit Search panel contains checkboxes and inputs that filter the files to be searched. You can filter out hidden files, files of specific sizes, or creation/modification dates. You can also restrict which files get searched by providing a wild card (or regular expression if preferred) pattern. By default, the patterns are applied to the base file or folder name. See File Patterns to learn more about accepted wild card pattern syntax and how to configure optional file pattern features. Results \ue157 Once a search or replace is initiated, the results will begin to appear in the Files and Content tabs. You can then double click a file to open it in your editor, or right click them to bring up a context menu with additional options. Tip You can hide/show columns by right clicking the list header to get a special context menu. You can then deselect or select the the column(s) you wish to hide/show respectively. Regular Expression Tester \ue157 Rummage comes with a simple regular expression tester. It has a simple text box to place content to search, and another text box that will show the final results after the find and replace are applied. Below those text boxes, there are two text input boxes for the find pattern and the replace pattern. Lastly, all search and replace flag options are found under the patterns. To use the tester, simply enter the content to search, set your desired options, and input your find and replace pattern. As you change your pattern or options, matches will be updated and highlighted, and the result box will be updated with any replacements. When you are satisfied with your result, click the Use button, and your pattern and settings will be populated in the main window. Saving and Loading Regular Expressions \ue157 Regular expressions can be very complex, and sometimes you might want to save them for future use. When you have a pattern configured that you want to save, simply click the Save Search button, and a dialog will pop up asking you to name the search. When done, click the Save button on the dialog and your search patterns and options will be saved. You'll notice that there are two input boxes. The first requires a unique name (only word characters, underscores, and hyphens are allowed). The second is an optional comment in case you wish to elaborate on what the pattern is for. Underneath the inputs will be the actual search settings being saved. To load a pattern that was saved previously, click the Load Search button. You will be presented with a dialog showing all your saved searches. Highlight the pattern you want to load and click the Load button. Your pattern and options will be populated in the main dialog. If you wish to edit the name or comment of a search, you can double click the entry or click the \"Edit\" button. Search Chains \ue157 There are times you may have a task that requires you to do multiple find and replaces that are all related, but are too difficult to represent as a single find and replace. This is where search chains can be helpful. Search chains are essentially a sequence of multiple saved search and replace patterns . You can create a search chain by clicking the Search Chains button which will bring up the search change manager. Here you can create or delete search chains. To use search chains, you must put Rummage in \"search chain\" mode by selecting the check box named Use search chains in the main window. When \"search chain\" mode is enabled, all controls that don't apply to search chains will be disabled, and the search box will be replaced with a drop down for selecting existing chains you've already created. When a search is performed, Rummage will iterate over each file with all the saved searches in the chain. Replace plugins \ue157 Regular expressions are great, but sometimes regular expressions aren't enough. If you are dealing with a replace task that requires logic that cannot be represented in a simple replace pattern, you can create a \"replace plugin\". Replace plugins are written in Python and are loaded by first selecting the Use plugin replace check box in the main dialog. Then the main dialog's Replace with text box will become the Replace plugin text box with an associated file picker. Here you can point to your replace plugin file. Replace plugins aren't meant to be full, complex modules that import lots of other relative files. They are meant to be a single, compact script, but inside that script, you can import anything that is already installed in your Python environment. Writing a Plugin \ue157 Replace plugins should contain two things. The first is a plugin class derived from the rummage.lib.rumcore.ReplacePlugin . The second is a function called get_replace that returns your class. The plugin class is fairly straight forward and is shown below. class ReplacePlugin ( object ): \"\"\"Rummage replace plugin.\"\"\" def __init__ ( self , file_info , flags ): \"\"\"Initialize.\"\"\" self . file_info = file_info self . flags = flags self . on_init () def on_init ( self ): \"\"\"Override this function to add initialization setup.\"\"\" def get_flags ( self ): \"\"\"Get flags.\"\"\" return self . flags def get_file_name ( self ): \"\"\"Get file name.\"\"\" return self . file_info . name def is_binary ( self ): \"\"\"Is a binary search.\"\"\" return self . file_info . encoding . encode == 'bin' def is_literal ( self ): \"\"\"Is a literal search.\"\"\" return self . flags & LITERAL def replace ( self , m ): \"\"\"Make replacement.\"\"\" return m . group ( 0 ) ReplacePlugin 's replace function will receive the parameter m which is either a regex or re match object (depending on what regular expression engine is selected). The return value must be either a Unicode string or byte string (for binary files). The ReplacePlugin 's file_info property is a named tuple providing information about the current file such as name, size, creation date, etc. class FileInfoRecord ( namedtuple ( 'FileInfoRecord' , [ 'id' , 'name' , 'size' , 'modified' , 'created' , 'encoding' ])): \"\"\"A record for tracking file info.\"\"\" The ReplacePlugin 's flags property contains only Rummage search related flags (the flags are abstracted at this level and are converted to the appropriate regular expression flags later). They can also be accessed from rummage.lib.rumcore . The flags are shown below. # Common regular expression flags (re|regex) IGNORECASE = 0x1 # (?i) DOTALL = 0x2 # (?s) MULTILINE = 0x4 # (?m) UNICODE = 0x8 # (?u) # Regex module flags ASCII = 0x10 # (?a) FULLCASE = 0x20 # (?f) WORD = 0x40 # (?w) BESTMATCH = 0x80 # (?b) ENHANCEMATCH = 0x100 # (?e) REVERSE = 0x200 # (?r) VERSION0 = 0x400 # (?V0) VERSION1 = 0x800 # (?V1) FORMATREPLACE = 0x1000 # Use {1} for groups in replace POSIX = 0x2000 # (?p) # Rumcore search related flags LITERAL = 0x10000 # Literal search Example Plugin In the example below, we have a replace plugin that replaces the search result with the name of the file. It is assumed this is not a binary replace, so a Unicode string is returned. from __future__ import unicode_literals from rummage.lib import rumcore import os class TestReplace ( rumcore . ReplacePlugin ): \"\"\"Replace object.\"\"\" def replace ( self , m ): \"\"\"Replace method.\"\"\" name = os . path . basename ( self . get_file_name ()) return name def get_replace (): \"\"\"Get the replace object.\"\"\" return TestReplace Export to CSV or HTML \ue157 Rummage allows the exporting of the results to either CSV or HTML. Simply select File\u2192Export and pick either CSV or HTML . The HTML output will be styled similar to the GUI interface with the results in tables with sortable columns. Large Result Sets Really, really large sets of results will probably be best suited for CSV as a browser may have a hard time loading the entire data set at once.","title":"Basic Usage"},{"location":"usage.html#basic-usage","text":"","title":"Basic Usage"},{"location":"usage.html#overview","text":"Rummage is designed to be easy to pick up. Its interface consists of three tabs: Search, Files, and Content. In the Search tab, a user specifies where they want to search, what they want to search for, and optionally what they want to replace it with. Search features can be tweaked with various options. The files that get searched can also be narrowed with patterns and filters. Rummage uses the default regular expression library ( Re ) that comes with Python. It also optionally works with the 3 rd party Regex library (if installed). As matches are found, general info about the matches will be displayed in the Files and Content tabs. You can double click files to open them in your favorite editor (see Editor Preferences to configure Rummage for your editor). Rummage also comes with a simple regular expression tester to test out patterns. It also provides a feature where patterns can be saved for later and/or frequent use. You can even create chains that will apply a series of saved searches.","title":"Overview"},{"location":"usage.html#running","text":"Once Rummage is installed, you can run it from the command line (assuming your Python scripts/bin folder is in your system path): rummage If you have multiple Python versions installed, you can call Rummage for that specific Python version by appending the major and minor Python version to the end: rummage3.6 In some environments, it may make sense to run Rummage with pythonw which is mainly for launching GUI scripts ( pythonw is not available on Linux). In some environments, it may be required (see Running in Anaconda ). pythonw -m rummage","title":"Running"},{"location":"usage.html#searching--replacing","text":"Search and replaces are configured in the Search tab which is broken up into 2 panels, the first of which is the Search & Replace panel. The second is the Limit Search panel.","title":"Searching &amp; Replacing"},{"location":"usage.html#search-panel","text":"The Search & Replace panel contains three text boxes with a dropdown history. The first text box defines where to search , the second defines what to search for , and the last defines what to replace matches with . You can select previously used patterns and search targets by expanding the dropdown panel for the input. Below the text boxes are checkboxes that control the regular expression engine's options and features. The available features will vary depending on which regular expression engine you are using. Each feature is documented in Search Options . Lastly, Rummage provides buttons to launch a regular expression tester , dialogs to save or load frequently used regular expressions, and a dialog to create and manage regular expression chains .","title":"Search Panel"},{"location":"usage.html#limit-search-panel","text":"The Limit Search panel contains checkboxes and inputs that filter the files to be searched. You can filter out hidden files, files of specific sizes, or creation/modification dates. You can also restrict which files get searched by providing a wild card (or regular expression if preferred) pattern. By default, the patterns are applied to the base file or folder name. See File Patterns to learn more about accepted wild card pattern syntax and how to configure optional file pattern features.","title":"Limit Search Panel"},{"location":"usage.html#results","text":"Once a search or replace is initiated, the results will begin to appear in the Files and Content tabs. You can then double click a file to open it in your editor, or right click them to bring up a context menu with additional options. Tip You can hide/show columns by right clicking the list header to get a special context menu. You can then deselect or select the the column(s) you wish to hide/show respectively.","title":"Results"},{"location":"usage.html#regular-expression-tester","text":"Rummage comes with a simple regular expression tester. It has a simple text box to place content to search, and another text box that will show the final results after the find and replace are applied. Below those text boxes, there are two text input boxes for the find pattern and the replace pattern. Lastly, all search and replace flag options are found under the patterns. To use the tester, simply enter the content to search, set your desired options, and input your find and replace pattern. As you change your pattern or options, matches will be updated and highlighted, and the result box will be updated with any replacements. When you are satisfied with your result, click the Use button, and your pattern and settings will be populated in the main window.","title":"Regular Expression Tester"},{"location":"usage.html#saving-and-loading-regular-expressions","text":"Regular expressions can be very complex, and sometimes you might want to save them for future use. When you have a pattern configured that you want to save, simply click the Save Search button, and a dialog will pop up asking you to name the search. When done, click the Save button on the dialog and your search patterns and options will be saved. You'll notice that there are two input boxes. The first requires a unique name (only word characters, underscores, and hyphens are allowed). The second is an optional comment in case you wish to elaborate on what the pattern is for. Underneath the inputs will be the actual search settings being saved. To load a pattern that was saved previously, click the Load Search button. You will be presented with a dialog showing all your saved searches. Highlight the pattern you want to load and click the Load button. Your pattern and options will be populated in the main dialog. If you wish to edit the name or comment of a search, you can double click the entry or click the \"Edit\" button.","title":"Saving and Loading Regular Expressions"},{"location":"usage.html#search-chains","text":"There are times you may have a task that requires you to do multiple find and replaces that are all related, but are too difficult to represent as a single find and replace. This is where search chains can be helpful. Search chains are essentially a sequence of multiple saved search and replace patterns . You can create a search chain by clicking the Search Chains button which will bring up the search change manager. Here you can create or delete search chains. To use search chains, you must put Rummage in \"search chain\" mode by selecting the check box named Use search chains in the main window. When \"search chain\" mode is enabled, all controls that don't apply to search chains will be disabled, and the search box will be replaced with a drop down for selecting existing chains you've already created. When a search is performed, Rummage will iterate over each file with all the saved searches in the chain.","title":"Search Chains"},{"location":"usage.html#replace-plugins","text":"Regular expressions are great, but sometimes regular expressions aren't enough. If you are dealing with a replace task that requires logic that cannot be represented in a simple replace pattern, you can create a \"replace plugin\". Replace plugins are written in Python and are loaded by first selecting the Use plugin replace check box in the main dialog. Then the main dialog's Replace with text box will become the Replace plugin text box with an associated file picker. Here you can point to your replace plugin file. Replace plugins aren't meant to be full, complex modules that import lots of other relative files. They are meant to be a single, compact script, but inside that script, you can import anything that is already installed in your Python environment.","title":"Replace plugins"},{"location":"usage.html#writing-a-plugin","text":"Replace plugins should contain two things. The first is a plugin class derived from the rummage.lib.rumcore.ReplacePlugin . The second is a function called get_replace that returns your class. The plugin class is fairly straight forward and is shown below. class ReplacePlugin ( object ): \"\"\"Rummage replace plugin.\"\"\" def __init__ ( self , file_info , flags ): \"\"\"Initialize.\"\"\" self . file_info = file_info self . flags = flags self . on_init () def on_init ( self ): \"\"\"Override this function to add initialization setup.\"\"\" def get_flags ( self ): \"\"\"Get flags.\"\"\" return self . flags def get_file_name ( self ): \"\"\"Get file name.\"\"\" return self . file_info . name def is_binary ( self ): \"\"\"Is a binary search.\"\"\" return self . file_info . encoding . encode == 'bin' def is_literal ( self ): \"\"\"Is a literal search.\"\"\" return self . flags & LITERAL def replace ( self , m ): \"\"\"Make replacement.\"\"\" return m . group ( 0 ) ReplacePlugin 's replace function will receive the parameter m which is either a regex or re match object (depending on what regular expression engine is selected). The return value must be either a Unicode string or byte string (for binary files). The ReplacePlugin 's file_info property is a named tuple providing information about the current file such as name, size, creation date, etc. class FileInfoRecord ( namedtuple ( 'FileInfoRecord' , [ 'id' , 'name' , 'size' , 'modified' , 'created' , 'encoding' ])): \"\"\"A record for tracking file info.\"\"\" The ReplacePlugin 's flags property contains only Rummage search related flags (the flags are abstracted at this level and are converted to the appropriate regular expression flags later). They can also be accessed from rummage.lib.rumcore . The flags are shown below. # Common regular expression flags (re|regex) IGNORECASE = 0x1 # (?i) DOTALL = 0x2 # (?s) MULTILINE = 0x4 # (?m) UNICODE = 0x8 # (?u) # Regex module flags ASCII = 0x10 # (?a) FULLCASE = 0x20 # (?f) WORD = 0x40 # (?w) BESTMATCH = 0x80 # (?b) ENHANCEMATCH = 0x100 # (?e) REVERSE = 0x200 # (?r) VERSION0 = 0x400 # (?V0) VERSION1 = 0x800 # (?V1) FORMATREPLACE = 0x1000 # Use {1} for groups in replace POSIX = 0x2000 # (?p) # Rumcore search related flags LITERAL = 0x10000 # Literal search Example Plugin In the example below, we have a replace plugin that replaces the search result with the name of the file. It is assumed this is not a binary replace, so a Unicode string is returned. from __future__ import unicode_literals from rummage.lib import rumcore import os class TestReplace ( rumcore . ReplacePlugin ): \"\"\"Replace object.\"\"\" def replace ( self , m ): \"\"\"Replace method.\"\"\" name = os . path . basename ( self . get_file_name ()) return name def get_replace (): \"\"\"Get the replace object.\"\"\" return TestReplace","title":"Writing a Plugin"},{"location":"usage.html#export-to-csv-or-html","text":"Rummage allows the exporting of the results to either CSV or HTML. Simply select File\u2192Export and pick either CSV or HTML . The HTML output will be styled similar to the GUI interface with the results in tables with sortable columns. Large Result Sets Really, really large sets of results will probably be best suited for CSV as a browser may have a hard time loading the entire data set at once.","title":"Export to CSV or HTML"}]}