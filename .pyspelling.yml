spellchecker: aspell

matrix:
- name: mkdocs
  sources:
  - site/**/*.html
  hunspell:
    d: docs/src/dictionary/hunspell/en_US
  aspell:
    lang: en
  dictionary:
    lang: en
    wordlists:
    - docs/src/dictionary/en-custom.txt
    output: build/dictionary/mkdocs.dic
  pipeline:
  - pyspelling.filters.html:
      comments: false
      attributes:
      - title
      - alt
      ignores:
      - code
      - pre
      - a.magiclink-compare
      - a.magiclink-commit
      - a.magiclink-github
      - span.keys
      - .MathJax_Preview
      - .md-nav__link
      - .md-footer-custom-text
      - .md-source__repository
      - .headerlink
      - .md-icon

- name: markdown
  sources:
  - README.md
  hunspell:
    d: docs/src/dictionary/hunspell/en_US
  aspell:
    lang: en
  dictionary:
    wordlists:
    - docs/src/dictionary/en-custom.txt
    output: build/dictionary/mkdocs.dic
  pipeline:
  - pyspelling.filters.markdown:
  - pyspelling.filters.html:
      comments: false
      attributes:
      - title
      - alt
      ignores:
      - code
      - pre

- name: css
  default_encoding: utf-8
  sources:
  - docs/internal_theme/**/*.css
  - rummage/**/*.css
  aspell:
    lang: en
  dictionary:
    wordlists:
    - docs/src/dictionary/en-custom.txt
    output: build/dictionary/scss.dic
  pipeline:
  - pyspelling.filters.stylesheets:
      stylesheets: css
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: \\[\\`~]
      delimiters:
        - open: (?P<open>`+)
          close: (?P=open)
        - open: (?s)^(?P<open>\s*~{3,})
          close: ^(?P=open)$

- name: python
  sources:
  - setup.py
  - "{rummage,tests,tools}/**/*.py|!rummage/**/gui.py"
  hunspell:
    d: docs/src/dictionary/hunspell/en_US
  aspell:
    lang: en
  dictionary:
    wordlists:
    - docs/src/dictionary/en-custom.txt
    output: build/dictionary/python.dic
  pipeline:
  - pyspelling.filters.python:
      group_comments: true
  - pyspelling.flow_control.wildcard:
      allow:
      - py-comment
  - pyspelling.filters.context:
      context_visible_first: true
      delimiters:
      # Ignore lint (noqa) and coverage (pragma) as well as shebang (#!)
      - open: ^(?:(?:noqa|pragma)\b|!)
        close: $
      # Ignore Python encoding string -*- encoding stuff -*-
      - open: ^ *-\*-
        close: -\*-$
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: \\[\\`~]
      delimiters:
      # Ignore text between inline back ticks
      - open: (?P<open>`+)
        close: (?P=open)
      # Ignore multiline content between fences ~~~ content ~~~
      - open: (?s)^(?P<open>\s*~{3,})
        close: ^(?P=open)$
